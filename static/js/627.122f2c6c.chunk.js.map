{"version":3,"file":"static/js/627.122f2c6c.chunk.js","mappings":"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","sources":["../node_modules/pixi.js/src/scene/graphics/gl/GlGraphicsAdaptor.ts","../node_modules/pixi.js/src/scene/mesh/gl/GlMeshAdaptor.ts","../node_modules/pixi.js/src/rendering/batcher/gl/GlBatchAdaptor.ts","../node_modules/pixi.js/src/rendering/renderers/gl/buffer/const.ts","../node_modules/pixi.js/src/rendering/renderers/gl/buffer/GlBuffer.ts","../node_modules/pixi.js/src/rendering/renderers/gl/buffer/GlBufferSystem.ts","../node_modules/pixi.js/src/rendering/renderers/gl/context/GlContextSystem.ts","../node_modules/pixi.js/src/rendering/renderers/gl/texture/const.ts","../node_modules/pixi.js/src/rendering/renderers/gl/geometry/utils/getGlTypeFromFormat.ts","../node_modules/pixi.js/src/rendering/renderers/gl/geometry/GlGeometrySystem.ts","../node_modules/pixi.js/src/rendering/renderers/gl/GlBackBufferSystem.ts","../node_modules/pixi.js/src/rendering/renderers/gl/GlColorMaskSystem.ts","../node_modules/pixi.js/src/rendering/renderers/gl/GlEncoderSystem.ts","../node_modules/pixi.js/src/rendering/renderers/gl/GlStencilSystem.ts","../node_modules/pixi.js/src/rendering/renderers/gl/shader/utils/createUboElementsSTD40.ts","../node_modules/pixi.js/src/rendering/renderers/gl/shader/utils/generateArraySyncSTD40.ts","../node_modules/pixi.js/src/rendering/renderers/gl/shader/utils/createUboSyncSTD40.ts","../node_modules/pixi.js/src/rendering/renderers/gl/GlUboSystem.ts","../node_modules/pixi.js/src/rendering/renderers/gl/GlRenderTarget.ts","../node_modules/pixi.js/src/rendering/renderers/gl/renderTarget/GlRenderTargetAdaptor.ts","../node_modules/pixi.js/src/rendering/renderers/gl/renderTarget/GlRenderTargetSystem.ts","../node_modules/pixi.js/src/rendering/renderers/gl/shader/GlProgramData.ts","../node_modules/pixi.js/src/rendering/renderers/gl/shader/program/compileShader.ts","../node_modules/pixi.js/src/rendering/renderers/gl/shader/program/defaultValue.ts","../node_modules/pixi.js/src/rendering/renderers/gl/shader/program/mapType.ts","../node_modules/pixi.js/src/rendering/renderers/gl/shader/program/logProgramError.ts","../node_modules/pixi.js/src/rendering/renderers/gl/shader/program/generateProgram.ts","../node_modules/pixi.js/src/rendering/renderers/gl/shader/program/extractAttributesFromGlProgram.ts","../node_modules/pixi.js/src/rendering/renderers/gl/shader/program/getUniformData.ts","../node_modules/pixi.js/src/rendering/renderers/gl/shader/program/getUboData.ts","../node_modules/pixi.js/src/rendering/renderers/gl/shader/GlShaderSystem.ts","../node_modules/pixi.js/src/rendering/renderers/gl/shader/GenerateShaderSyncCode.ts","../node_modules/pixi.js/src/rendering/renderers/gl/shader/utils/generateUniformsSyncTypes.ts","../node_modules/pixi.js/src/rendering/renderers/gl/shader/GlUniformGroupSystem.ts","../node_modules/pixi.js/src/rendering/renderers/gl/shader/utils/generateUniformsSync.ts","../node_modules/pixi.js/src/rendering/renderers/gl/state/GlStateSystem.ts","../node_modules/pixi.js/src/rendering/renderers/gl/state/mapWebGLBlendModesToPixi.ts","../node_modules/pixi.js/src/rendering/renderers/gl/texture/GlTexture.ts","../node_modules/pixi.js/src/rendering/renderers/gl/texture/uploaders/glUploadBufferImageResource.ts","../node_modules/pixi.js/src/rendering/renderers/gl/texture/uploaders/glUploadCompressedTextureResource.ts","../node_modules/pixi.js/src/rendering/renderers/gl/texture/uploaders/glUploadImageResource.ts","../node_modules/pixi.js/src/rendering/renderers/gl/texture/uploaders/glUploadVideoResource.ts","../node_modules/pixi.js/src/rendering/renderers/gl/texture/utils/pixiToGlMaps.ts","../node_modules/pixi.js/src/rendering/renderers/gl/texture/utils/applyStyleParams.ts","../node_modules/pixi.js/src/rendering/renderers/gl/texture/GlTextureSystem.ts","../node_modules/pixi.js/src/rendering/renderers/gl/texture/utils/mapFormatToGlInternalFormat.ts","../node_modules/pixi.js/src/rendering/renderers/gl/texture/utils/mapFormatToGlType.ts","../node_modules/pixi.js/src/rendering/renderers/gl/texture/utils/mapFormatToGlFormat.ts","../node_modules/pixi.js/src/rendering/renderers/gl/WebGLRenderer.ts","../node_modules/pixi.js/src/rendering/renderers/gl/shader/getBatchSamplersUniformGroup.ts"],"sourcesContent":["import { ExtensionType } from '../../../extensions/Extensions';\nimport { Matrix } from '../../../maths/matrix/Matrix';\nimport { compileHighShaderGlProgram } from '../../../rendering/high-shader/compileHighShaderToProgram';\nimport { colorBitGl } from '../../../rendering/high-shader/shader-bits/colorBit';\nimport { generateTextureBatchBitGl } from '../../../rendering/high-shader/shader-bits/generateTextureBatchBit';\nimport { localUniformBitGl } from '../../../rendering/high-shader/shader-bits/localUniformBit';\nimport { roundPixelsBitGl } from '../../../rendering/high-shader/shader-bits/roundPixelsBit';\nimport { getBatchSamplersUniformGroup } from '../../../rendering/renderers/gl/shader/getBatchSamplersUniformGroup';\nimport { Shader } from '../../../rendering/renderers/shared/shader/Shader';\nimport { UniformGroup } from '../../../rendering/renderers/shared/shader/UniformGroup';\nimport { maxRecommendedTextures } from '../../../rendering/renderers/shared/texture/utils/maxRecommendedTextures';\n\nimport type { Batch } from '../../../rendering/batcher/shared/Batcher';\nimport type { WebGLRenderer } from '../../../rendering/renderers/gl/WebGLRenderer';\nimport type { Graphics } from '../shared/Graphics';\nimport type { GraphicsAdaptor, GraphicsPipe } from '../shared/GraphicsPipe';\n\n/**\n * A GraphicsAdaptor that uses WebGL to render graphics.\n * @memberof rendering\n * @ignore\n */\nexport class GlGraphicsAdaptor implements GraphicsAdaptor\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipesAdaptor,\n        ],\n        name: 'graphics',\n    } as const;\n\n    public shader: Shader;\n\n    public init()\n    {\n        const uniforms = new UniformGroup({\n            uColor: { value: new Float32Array([1, 1, 1, 1]), type: 'vec4<f32>' },\n            uTransformMatrix: { value: new Matrix(), type: 'mat3x3<f32>' },\n            uRound: { value: 0, type: 'f32' },\n        });\n\n        const maxTextures = maxRecommendedTextures();\n\n        const glProgram = compileHighShaderGlProgram({\n            name: 'graphics',\n            bits: [\n                colorBitGl,\n                generateTextureBatchBitGl(maxTextures),\n                localUniformBitGl,\n                roundPixelsBitGl,\n            ]\n        });\n\n        this.shader = new Shader({\n            glProgram,\n            resources: {\n                localUniforms: uniforms,\n                batchSamplers: getBatchSamplersUniformGroup(maxTextures),\n            }\n        });\n    }\n\n    public execute(graphicsPipe: GraphicsPipe, renderable: Graphics): void\n    {\n        const context = renderable.context;\n        const shader = context.customShader || this.shader;\n        const renderer = graphicsPipe.renderer as WebGLRenderer;\n        const contextSystem = renderer.graphicsContext;\n\n        const {\n            geometry, instructions,\n        } = contextSystem.getContextRenderData(context);\n\n        // WebGL specific..\n        shader.groups[0] = renderer.globalUniforms.bindGroup;\n\n        renderer.state.set(graphicsPipe.state);\n\n        renderer.shader.bind(shader);\n\n        renderer.geometry.bind(geometry, shader.glProgram);\n\n        const batches = instructions.instructions as Batch[];\n\n        for (let i = 0; i < instructions.instructionSize; i++)\n        {\n            const batch = batches[i];\n\n            if (batch.size)\n            {\n                for (let j = 0; j < batch.textures.textures.length; j++)\n                {\n                    renderer.texture.bind(batch.textures.textures[j], j);\n                }\n\n                renderer.geometry.draw('triangle-list', batch.size, batch.start);\n            }\n        }\n    }\n\n    public destroy(): void\n    {\n        this.shader.destroy(true);\n        this.shader = null;\n    }\n}\n","import { ExtensionType } from '../../../extensions/Extensions';\nimport { Matrix } from '../../../maths/matrix/Matrix';\nimport { compileHighShaderGlProgram } from '../../../rendering/high-shader/compileHighShaderToProgram';\nimport { localUniformBitGl } from '../../../rendering/high-shader/shader-bits/localUniformBit';\nimport { roundPixelsBitGl } from '../../../rendering/high-shader/shader-bits/roundPixelsBit';\nimport { textureBitGl } from '../../../rendering/high-shader/shader-bits/textureBit';\nimport { Shader } from '../../../rendering/renderers/shared/shader/Shader';\nimport { Texture } from '../../../rendering/renderers/shared/texture/Texture';\nimport { warn } from '../../../utils/logging/warn';\n\nimport type { Mesh } from '../shared/Mesh';\nimport type { MeshAdaptor, MeshPipe } from '../shared/MeshPipe';\n\n/**\n * A MeshAdaptor that uses the WebGL to render meshes.\n * @memberof rendering\n * @ignore\n */\nexport class GlMeshAdaptor implements MeshAdaptor\n{\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipesAdaptor,\n        ],\n        name: 'mesh',\n    } as const;\n\n    private _shader: Shader;\n\n    public init(): void\n    {\n        const glProgram = compileHighShaderGlProgram({\n            name: 'mesh',\n            bits: [\n                localUniformBitGl,\n                textureBitGl,\n                roundPixelsBitGl,\n            ]\n        });\n\n        this._shader = new Shader({\n            glProgram,\n            resources: {\n                uTexture: Texture.EMPTY.source,\n                textureUniforms: {\n                    uTextureMatrix: { type: 'mat3x3<f32>', value: new Matrix() },\n                }\n            }\n        });\n    }\n\n    public execute(meshPipe: MeshPipe, mesh: Mesh): void\n    {\n        const renderer = meshPipe.renderer;\n\n        let shader: Shader = mesh._shader;\n\n        if (!shader)\n        {\n            shader = this._shader;\n\n            const texture = mesh.texture;\n            const source = texture.source;\n\n            shader.resources.uTexture = source;\n            shader.resources.uSampler = source.style;\n            shader.resources.textureUniforms.uniforms.uTextureMatrix = texture.textureMatrix.mapCoord;\n        }\n        else if (!shader.glProgram)\n        {\n            // #if _DEBUG\n            warn('Mesh shader has no glProgram', mesh.shader);\n            // #endif\n\n            return;\n        }\n\n        // setting the groups to be high to be compatible and not\n        // overlap any other groups\n        shader.groups[100] = renderer.globalUniforms.bindGroup;\n        shader.groups[101] = meshPipe.localUniformsBindGroup;\n\n        renderer.encoder.draw({\n            geometry: mesh._geometry,\n            shader,\n            state: mesh.state,\n        });\n    }\n\n    public destroy(): void\n    {\n        this._shader.destroy(true);\n        this._shader = null;\n    }\n}\n","import { ExtensionType } from '../../../extensions/Extensions';\nimport { compileHighShaderGlProgram } from '../../high-shader/compileHighShaderToProgram';\nimport { colorBitGl } from '../../high-shader/shader-bits/colorBit';\nimport { generateTextureBatchBitGl } from '../../high-shader/shader-bits/generateTextureBatchBit';\nimport { roundPixelsBitGl } from '../../high-shader/shader-bits/roundPixelsBit';\nimport { getBatchSamplersUniformGroup } from '../../renderers/gl/shader/getBatchSamplersUniformGroup';\nimport { Shader } from '../../renderers/shared/shader/Shader';\nimport { State } from '../../renderers/shared/state/State';\nimport { maxRecommendedTextures } from '../../renderers/shared/texture/utils/maxRecommendedTextures';\n\nimport type { WebGLRenderer } from '../../renderers/gl/WebGLRenderer';\nimport type { Geometry } from '../../renderers/shared/geometry/Geometry';\nimport type { Batch } from '../shared/Batcher';\nimport type { BatcherAdaptor, BatcherPipe } from '../shared/BatcherPipe';\n\n/**\n * A BatcherAdaptor that uses WebGL to render batches.\n * @memberof rendering\n * @ignore\n */\nexport class GlBatchAdaptor implements BatcherAdaptor\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipesAdaptor,\n        ],\n        name: 'batch',\n    } as const;\n\n    private _shader: Shader;\n    private _didUpload = false;\n    private readonly _tempState = State.for2d();\n\n    public init(batcherPipe: BatcherPipe): void\n    {\n        const maxTextures = maxRecommendedTextures();\n\n        const glProgram = compileHighShaderGlProgram({\n            name: 'batch',\n            bits: [\n                colorBitGl,\n                generateTextureBatchBitGl(maxTextures),\n                roundPixelsBitGl,\n            ]\n        });\n\n        this._shader = new Shader({\n            glProgram,\n            resources: {\n                batchSamplers: getBatchSamplersUniformGroup(maxTextures),\n            }\n        });\n\n        batcherPipe.renderer.runners.contextChange.add(this);\n    }\n\n    public contextChange(): void\n    {\n        this._didUpload = false;\n    }\n\n    public start(batchPipe: BatcherPipe, geometry: Geometry): void\n    {\n        const renderer = batchPipe.renderer as WebGLRenderer;\n\n        renderer.shader.bind(this._shader, this._didUpload);\n\n        renderer.shader.updateUniformGroup(renderer.globalUniforms.uniformGroup);\n\n        renderer.geometry.bind(geometry, this._shader.glProgram);\n    }\n\n    public execute(batchPipe: BatcherPipe, batch: Batch): void\n    {\n        const renderer = batchPipe.renderer as WebGLRenderer;\n\n        this._didUpload = true;\n\n        this._tempState.blendMode = batch.blendMode;\n\n        renderer.state.set(this._tempState);\n\n        const textures = batch.textures.textures;\n\n        for (let i = 0; i < textures.length; i++)\n        {\n            renderer.texture.bind(textures[i], i);\n        }\n\n        renderer.geometry.draw('triangle-list', batch.size, batch.start);\n    }\n\n    public destroy(): void\n    {\n        this._shader.destroy(true);\n        this._shader = null;\n    }\n}\n","/**\n * Constants for various buffer types in Pixi\n * @see BUFFER_TYPE\n * @name BUFFER_TYPE\n * @static\n * @enum {number}\n * @property {number} ELEMENT_ARRAY_BUFFER - buffer type for using as an index buffer\n * @property {number} ARRAY_BUFFER - buffer type for using attribute data\n * @property {number} UNIFORM_BUFFER - the buffer type is for uniform buffer objects\n */\nexport enum BUFFER_TYPE\n    // eslint-disable-next-line @typescript-eslint/indent\n {\n    ELEMENT_ARRAY_BUFFER = 34963,\n    ARRAY_BUFFER = 34962,\n    UNIFORM_BUFFER = 35345,\n}\n\n","import type { BUFFER_TYPE } from './const';\n\nexport class GlBuffer\n{\n    public buffer: WebGLBuffer;\n    public updateID: number;\n    public byteLength: number;\n    public type: number;\n\n    constructor(buffer: WebGLBuffer, type: BUFFER_TYPE)\n    {\n        this.buffer = buffer || null;\n        this.updateID = -1;\n        this.byteLength = -1;\n        this.type = type;\n    }\n}\n","import { ExtensionType } from '../../../../extensions/Extensions';\nimport { BufferUsage } from '../../shared/buffer/const';\nimport { BUFFER_TYPE } from './const';\nimport { GlBuffer } from './GlBuffer';\n\nimport type { Buffer } from '../../shared/buffer/Buffer';\nimport type { System } from '../../shared/system/System';\nimport type { GlRenderingContext } from '../context/GlRenderingContext';\nimport type { WebGLRenderer } from '../WebGLRenderer';\n\n/**\n * System plugin to the renderer to manage buffers.\n *\n * WebGL uses Buffers as a way to store objects to the GPU.\n * This system makes working with them a lot easier.\n *\n * Buffers are used in three main places in WebGL\n * - geometry information\n * - Uniform information (via uniform buffer objects - a WebGL 2 only feature)\n * - Transform feedback information. (WebGL 2 only feature)\n *\n * This system will handle the binding of buffers to the GPU as well as uploading\n * them. With this system, you never need to work directly with GPU buffers, but instead work with\n * the Buffer class.\n * @class\n * @memberof rendering\n */\nexport class GlBufferSystem implements System\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n        ],\n        name: 'buffer',\n    } as const;\n\n    private _gl: GlRenderingContext;\n    private _gpuBuffers: {[key: number]: GlBuffer} = Object.create(null);\n\n    /** Cache keeping track of the base bound buffer bases */\n    private readonly _boundBufferBases: {[key: number]: Buffer} = Object.create(null);\n\n    private _renderer: WebGLRenderer;\n\n    /**\n     * @param {Renderer} renderer - The renderer this System works for.\n     */\n    constructor(renderer: WebGLRenderer)\n    {\n        this._renderer = renderer;\n    }\n\n    /**\n     * @ignore\n     */\n    public destroy(): void\n    {\n        this._renderer = null;\n        this._gl = null;\n        this._gpuBuffers = null;\n        (this._boundBufferBases as null) = null;\n    }\n\n    /** Sets up the renderer context and necessary buffers. */\n    protected contextChange(): void\n    {\n        this._gpuBuffers = Object.create(null);\n        this._gl = this._renderer.gl;\n    }\n\n    public getGlBuffer(buffer: Buffer): GlBuffer\n    {\n        return this._gpuBuffers[buffer.uid] || this.createGLBuffer(buffer);\n    }\n\n    /**\n     * This binds specified buffer. On first run, it will create the webGL buffers for the context too\n     * @param buffer - the buffer to bind to the renderer\n     */\n    public bind(buffer: Buffer): void\n    {\n        const { _gl: gl } = this;\n\n        const glBuffer = this.getGlBuffer(buffer);\n\n        gl.bindBuffer(glBuffer.type, glBuffer.buffer);\n    }\n\n    /**\n     * Binds an uniform buffer to at the given index.\n     *\n     * A cache is used so a buffer will not be bound again if already bound.\n     * @param buffer - the buffer to bind\n     * @param index - the base index to bind it to.\n     */\n    public bindBufferBase(buffer: Buffer, index: number): void\n    {\n        const { _gl: gl } = this;\n\n        if (this._boundBufferBases[index] !== buffer)\n        {\n            const glBuffer = this.getGlBuffer(buffer);\n\n            this._boundBufferBases[index] = buffer;\n\n            gl.bindBufferBase(gl.UNIFORM_BUFFER, index, glBuffer.buffer);\n        }\n    }\n\n    /**\n     * Binds a buffer whilst also binding its range.\n     * This will make the buffer start from the offset supplied rather than 0 when it is read.\n     * @param buffer - the buffer to bind\n     * @param index - the base index to bind at, defaults to 0\n     * @param offset - the offset to bind at (this is blocks of 256). 0 = 0, 1 = 256, 2 = 512 etc\n     */\n    public bindBufferRange(buffer: Buffer, index?: number, offset?: number): void\n    {\n        const { _gl: gl } = this;\n\n        offset = offset || 0;\n\n        const glBuffer = this.getGlBuffer(buffer);\n\n        gl.bindBufferRange(gl.UNIFORM_BUFFER, index || 0, glBuffer.buffer, offset * 256, 256);\n    }\n\n    /**\n     * Will ensure the data in the buffer is uploaded to the GPU.\n     * @param {Buffer} buffer - the buffer to update\n     */\n    public updateBuffer(buffer: Buffer): GlBuffer\n    {\n        const { _gl: gl } = this;\n\n        const glBuffer = this.getGlBuffer(buffer);\n\n        if (buffer._updateID === glBuffer.updateID)\n        {\n            return glBuffer;\n        }\n\n        glBuffer.updateID = buffer._updateID;\n\n        gl.bindBuffer(glBuffer.type, glBuffer.buffer);\n\n        const data = buffer.data;\n\n        if (glBuffer.byteLength >= buffer.data.byteLength)\n        {\n            // assuming our buffers are aligned to 4 bits...\n            // offset is always zero for now!\n            gl.bufferSubData(glBuffer.type, 0, data, 0, buffer._updateSize / data.BYTES_PER_ELEMENT);\n        }\n        else\n        {\n            const drawType = (buffer.descriptor.usage & BufferUsage.STATIC) ? gl.STATIC_DRAW : gl.DYNAMIC_DRAW;\n\n            glBuffer.byteLength = data.byteLength;\n\n            // assuming our buffers are aligned to 4 bits...\n            gl.bufferData(glBuffer.type, data, drawType);\n        }\n\n        return glBuffer;\n    }\n\n    /** dispose all WebGL resources of all managed buffers */\n    public destroyAll(): void\n    {\n        const gl = this._gl;\n\n        for (const id in this._gpuBuffers)\n        {\n            gl.deleteBuffer(this._gpuBuffers[id].buffer);\n        }\n\n        this._gpuBuffers = Object.create(null);\n    }\n\n    /**\n     * Disposes buffer\n     * @param {Buffer} buffer - buffer with data\n     * @param {boolean} [contextLost=false] - If context was lost, we suppress deleteVertexArray\n     */\n    protected onBufferDestroy(buffer: Buffer, contextLost?: boolean): void\n    {\n        const glBuffer = this._gpuBuffers[buffer.uid];\n\n        const gl = this._gl;\n\n        if (!contextLost)\n        {\n            gl.deleteBuffer(glBuffer.buffer);\n        }\n\n        this._gpuBuffers[buffer.uid] = null;\n    }\n\n    /**\n     * creates and attaches a GLBuffer object tied to the current context.\n     * @param buffer\n     * @protected\n     */\n    protected createGLBuffer(buffer: Buffer): GlBuffer\n    {\n        const { _gl: gl } = this;\n\n        let type = BUFFER_TYPE.ARRAY_BUFFER;\n\n        if ((buffer.descriptor.usage & BufferUsage.INDEX))\n        {\n            type = BUFFER_TYPE.ELEMENT_ARRAY_BUFFER;\n        }\n        else if ((buffer.descriptor.usage & BufferUsage.UNIFORM))\n        {\n            type = BUFFER_TYPE.UNIFORM_BUFFER;\n        }\n\n        const glBuffer = new GlBuffer(gl.createBuffer(), type);\n\n        this._gpuBuffers[buffer.uid] = glBuffer;\n\n        buffer.on('destroy', this.onBufferDestroy, this);\n\n        return glBuffer;\n    }\n}\n","import { DOMAdapter } from '../../../../environment/adapter';\nimport { ExtensionType } from '../../../../extensions/Extensions';\nimport { warn } from '../../../../utils/logging/warn';\nimport { type GpuPowerPreference } from '../../types';\n\nimport type { System } from '../../shared/system/System';\nimport type { WebGLRenderer } from '../WebGLRenderer';\nimport type { WebGLExtensions } from './WebGLExtensions';\n\n/**\n * Options for the context system.\n * @memberof rendering\n * @property {WebGL2RenderingContext | null} [context=null] - User-provided WebGL rendering context object.\n * @property {GpuPowerPreference} [powerPreference='default'] - An optional hint indicating what configuration\n * of GPU is suitable for the WebGL context, can be `'high-performance'` or `'low-power'`. Setting to `'high-performance'`\n * will prioritize rendering performance over power consumption, while setting to `'low-power'` will prioritize power saving\n * over rendering performance.\n * @property {boolean} [premultipliedAlpha=true] - Whether the compositor will assume the drawing buffer contains\n * colors with premultiplied alpha.\n * @property {boolean} [preserveDrawingBuffer=false] - Whether to enable drawing buffer preservation.\n * If enabled, the drawing buffer will preserve\n * its value until cleared or overwritten. Enable this if you need to call `toDataUrl` on the WebGL context.\n * @property {boolean} [antialias] - Whether to enable antialiasing.\n * @property {1 | 2} [preferWebGLVersion=2] - The preferred WebGL version to use.\n */\nexport interface ContextSystemOptions\n{\n    /**\n     * User-provided WebGL rendering context object.\n     * @default null\n     * @memberof rendering.SharedRendererOptions\n     */\n    context: WebGL2RenderingContext | null;\n    /**\n     * An optional hint indicating what configuration of GPU is suitable for the WebGL context,\n     * can be `'high-performance'` or `'low-power'`.\n     * Setting to `'high-performance'` will prioritize rendering performance over power consumption,\n     * while setting to `'low-power'` will prioritize power saving over rendering performance.\n     * @memberof rendering.SharedRendererOptions\n     * @default undefined\n     */\n    powerPreference?: GpuPowerPreference;\n\n    /**\n     * Whether the compositor will assume the drawing buffer contains colors with premultiplied alpha.\n     * @default true\n     * @memberof rendering.SharedRendererOptions\n     */\n    premultipliedAlpha: boolean;\n    /**\n     * Whether to enable drawing buffer preservation. If enabled, the drawing buffer will preserve\n     * its value until cleared or overwritten. Enable this if you need to call `toDataUrl` on the WebGL context.\n     * @default false\n     * @memberof rendering.SharedRendererOptions\n     */\n    preserveDrawingBuffer: boolean;\n\n    antialias?: boolean;\n\n    /**\n     * The preferred WebGL version to use.\n     * @default 2\n     * @memberof rendering.SharedRendererOptions\n     */\n    preferWebGLVersion?: 1 | 2;\n}\n\n/**\n * System plugin to the renderer to manage the context\n * @memberof rendering\n */\nexport class GlContextSystem implements System<ContextSystemOptions>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n        ],\n        name: 'context',\n    } as const;\n\n    /** The default options for the system. */\n    public static defaultOptions: ContextSystemOptions = {\n        /**\n         * {@link WebGLOptions.context}\n         * @default null\n         */\n        context: null,\n        /**\n         * {@link WebGLOptions.premultipliedAlpha}\n         * @default true\n         */\n        premultipliedAlpha: true,\n        /**\n         * {@link WebGLOptions.preserveDrawingBuffer}\n         * @default false\n         */\n        preserveDrawingBuffer: false,\n        /**\n         * {@link WebGLOptions.powerPreference}\n         * @default default\n         */\n        powerPreference: undefined,\n        /**\n         * {@link WebGLOptions.webGLVersion}\n         * @default 2\n         */\n        preferWebGLVersion: 2,\n    };\n\n    protected CONTEXT_UID: number;\n    protected gl: WebGL2RenderingContext;\n\n    /**\n     * Features supported by current renderer.\n     * @type {object}\n     * @readonly\n     */\n    public supports = {\n        /** Support for 32-bit indices buffer. */\n        uint32Indices: true,\n        /** Support for UniformBufferObjects */\n        uniformBufferObject: true,\n        /** Support for VertexArrayObjects */\n        vertexArrayObject: true,\n        /** Support for SRGB texture format */\n        srgbTextures: true,\n        /** Support for wrapping modes if a texture is non-power of two */\n        nonPowOf2wrapping: true,\n        /** Support for MSAA (antialiasing of dynamic textures) */\n        msaa: true,\n        /** Support for mipmaps if a texture is non-power of two */\n        nonPowOf2mipmaps: true,\n    };\n\n    /**\n     * Extensions available.\n     * @type {object}\n     * @readonly\n     * @property {WEBGL_draw_buffers} drawBuffers - WebGL v1 extension\n     * @property {WEBGL_depth_texture} depthTexture - WebGL v1 extension\n     * @property {OES_texture_float} floatTexture - WebGL v1 extension\n     * @property {WEBGL_lose_context} loseContext - WebGL v1 extension\n     * @property {OES_vertex_array_object} vertexArrayObject - WebGL v1 extension\n     * @property {EXT_texture_filter_anisotropic} anisotropicFiltering - WebGL v1 and v2 extension\n     */\n    public extensions: WebGLExtensions;\n\n    public webGLVersion: 1 | 2;\n\n    private _renderer: WebGLRenderer;\n    private _contextLossForced: boolean;\n\n    /** @param renderer - The renderer this System works for. */\n    constructor(renderer: WebGLRenderer)\n    {\n        this._renderer = renderer;\n\n        this.extensions = Object.create(null);\n\n        // Bind functions\n        this.handleContextLost = this.handleContextLost.bind(this);\n        this.handleContextRestored = this.handleContextRestored.bind(this);\n    }\n\n    /**\n     * `true` if the context is lost\n     * @readonly\n     */\n    get isLost(): boolean\n    {\n        return (!this.gl || this.gl.isContextLost());\n    }\n\n    /**\n     * Handles the context change event.\n     * @param {WebGLRenderingContext} gl - New WebGL context.\n     */\n    protected contextChange(gl: WebGL2RenderingContext): void\n    {\n        this.gl = gl;\n        this._renderer.gl = gl;\n    }\n\n    public init(options: ContextSystemOptions): void\n    {\n        options = { ...GlContextSystem.defaultOptions, ...options };\n\n        /*\n         * The options passed in to create a new WebGL context.\n         */\n        if (options.context)\n        {\n            this.initFromContext(options.context);\n        }\n        else\n        {\n            const alpha = this._renderer.background.alpha < 1;\n            const premultipliedAlpha = options.premultipliedAlpha ?? true;\n            const antialias = options.antialias && !this._renderer.backBuffer.useBackBuffer;\n\n            this.createContext(options.preferWebGLVersion, {\n                alpha,\n                premultipliedAlpha,\n                antialias,\n                stencil: true,\n                preserveDrawingBuffer: options.preserveDrawingBuffer,\n                powerPreference: options.powerPreference ?? 'default',\n            });\n        }\n    }\n\n    /**\n     * Initializes the context.\n     * @protected\n     * @param {WebGLRenderingContext} gl - WebGL context\n     */\n    protected initFromContext(gl: WebGL2RenderingContext): void\n    {\n        this.gl = gl;\n\n        this.webGLVersion = gl instanceof DOMAdapter.get().getWebGLRenderingContext() ? 1 : 2;\n\n        this.getExtensions();\n\n        this.validateContext(gl);\n\n        this._renderer.runners.contextChange.emit(gl);\n\n        const element = this._renderer.view.canvas;\n\n        (element as any).addEventListener('webglcontextlost', this.handleContextLost, false);\n        element.addEventListener('webglcontextrestored', this.handleContextRestored, false);\n    }\n\n    /**\n     * Initialize from context options\n     * @protected\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/getContext\n     * @param preferWebGLVersion\n     * @param {object} options - context attributes\n     */\n    protected createContext(preferWebGLVersion: 1 | 2, options: WebGLContextAttributes): void\n    {\n        let gl: WebGL2RenderingContext | WebGLRenderingContext;\n        const canvas = this._renderer.view.canvas;\n\n        if (preferWebGLVersion === 2)\n        {\n            gl = canvas.getContext('webgl2', options);\n        }\n\n        if (!gl)\n        {\n            gl = canvas.getContext('webgl', options);\n\n            if (!gl)\n            {\n                // fail, not able to get a context\n                throw new Error('This browser does not support WebGL. Try using the canvas renderer');\n            }\n        }\n\n        this.gl = gl as WebGL2RenderingContext;\n\n        this.initFromContext(this.gl);\n    }\n\n    /** Auto-populate the {@link GlContextSystem.extensions extensions}. */\n    protected getExtensions(): void\n    {\n        // time to set up default extensions that Pixi uses.\n        const { gl } = this;\n\n        const common = {\n            anisotropicFiltering: gl.getExtension('EXT_texture_filter_anisotropic'),\n            floatTextureLinear: gl.getExtension('OES_texture_float_linear'),\n\n            s3tc: gl.getExtension('WEBGL_compressed_texture_s3tc'),\n            s3tc_sRGB: gl.getExtension('WEBGL_compressed_texture_s3tc_srgb'), // eslint-disable-line camelcase\n            etc: gl.getExtension('WEBGL_compressed_texture_etc'),\n            etc1: gl.getExtension('WEBGL_compressed_texture_etc1'),\n            pvrtc: gl.getExtension('WEBGL_compressed_texture_pvrtc')\n                || gl.getExtension('WEBKIT_WEBGL_compressed_texture_pvrtc'),\n            atc: gl.getExtension('WEBGL_compressed_texture_atc'),\n            astc: gl.getExtension('WEBGL_compressed_texture_astc'),\n            bptc: gl.getExtension('EXT_texture_compression_bptc'),\n            rgtc: gl.getExtension('EXT_texture_compression_rgtc'),\n            loseContext: gl.getExtension('WEBGL_lose_context'),\n        };\n\n        if (this.webGLVersion === 1)\n        {\n            this.extensions = {\n                ...common,\n\n                drawBuffers: gl.getExtension('WEBGL_draw_buffers'),\n                depthTexture: gl.getExtension('WEBGL_depth_texture'),\n                vertexArrayObject: gl.getExtension('OES_vertex_array_object')\n                    || gl.getExtension('MOZ_OES_vertex_array_object')\n                    || gl.getExtension('WEBKIT_OES_vertex_array_object'),\n                uint32ElementIndex: gl.getExtension('OES_element_index_uint'),\n                // Floats and half-floats\n                floatTexture: gl.getExtension('OES_texture_float'),\n                floatTextureLinear: gl.getExtension('OES_texture_float_linear'),\n                textureHalfFloat: gl.getExtension('OES_texture_half_float'),\n                textureHalfFloatLinear: gl.getExtension('OES_texture_half_float_linear'),\n                vertexAttribDivisorANGLE: gl.getExtension('ANGLE_instanced_arrays'),\n                srgb: gl.getExtension('EXT_sRGB'),\n            };\n        }\n        else\n        {\n            this.extensions = {\n                ...common,\n                colorBufferFloat: gl.getExtension('EXT_color_buffer_float'),\n            };\n\n            const provokeExt = gl.getExtension('WEBGL_provoking_vertex');\n\n            if (provokeExt)\n            {\n                provokeExt.provokingVertexWEBGL(provokeExt.FIRST_VERTEX_CONVENTION_WEBGL);\n            }\n        }\n    }\n\n    /**\n     * Handles a lost webgl context\n     * @param {WebGLContextEvent} event - The context lost event.\n     */\n    protected handleContextLost(event: WebGLContextEvent): void\n    {\n        event.preventDefault();\n\n        // only restore if we purposefully nuked it\n        if (this._contextLossForced)\n        {\n            this._contextLossForced = false;\n            // Restore the context after this event has exited\n            setTimeout(() =>\n            {\n                if (this.gl.isContextLost())\n                {\n                    this.extensions.loseContext?.restoreContext();\n                }\n            }, 0);\n        }\n    }\n\n    /** Handles a restored webgl context. */\n    protected handleContextRestored(): void\n    {\n        this._renderer.runners.contextChange.emit(this.gl);\n    }\n\n    public destroy(): void\n    {\n        const element = this._renderer.view.canvas;\n\n        this._renderer = null;\n\n        // remove listeners\n        (element as any).removeEventListener('webglcontextlost', this.handleContextLost);\n        element.removeEventListener('webglcontextrestored', this.handleContextRestored);\n\n        this.gl.useProgram(null);\n\n        this.extensions.loseContext?.loseContext();\n    }\n\n    /**\n     * this function can be called to force a webGL context loss\n     * this will release all resources on the GPU.\n     * Useful if you need to put Pixi to sleep, and save some GPU memory\n     *\n     * As soon as render is called - all resources will be created again.\n     */\n    public forceContextLoss(): void\n    {\n        this.extensions.loseContext?.loseContext();\n        this._contextLossForced = true;\n    }\n    /**\n     * Validate context.\n     * @param {WebGLRenderingContext} gl - Render context.\n     */\n    protected validateContext(gl: WebGL2RenderingContext): void\n    {\n        const attributes = gl.getContextAttributes();\n\n        // this is going to be fairly simple for now.. but at least we have room to grow!\n        if (attributes && !attributes.stencil)\n        {\n            // #if _DEBUG\n            /* eslint-disable max-len, no-console */\n            warn('Provided WebGL context does not have a stencil buffer, masks may not render correctly');\n            /* eslint-enable max-len, no-console */\n            // #endif\n        }\n\n        // support\n        const supports = this.supports;\n\n        const isWebGl2 = this.webGLVersion === 2;\n        const extensions = this.extensions;\n\n        supports.uint32Indices = isWebGl2 || !!extensions.uint32ElementIndex;\n        supports.uniformBufferObject = isWebGl2;\n        supports.vertexArrayObject = isWebGl2 || !!extensions.vertexArrayObject;\n        supports.srgbTextures = isWebGl2 || !!extensions.srgb;\n        supports.nonPowOf2wrapping = isWebGl2;\n        supports.nonPowOf2mipmaps = isWebGl2;\n        supports.msaa = isWebGl2;\n\n        if (!supports.uint32Indices)\n        {\n            // #if _DEBUG\n            /* eslint-disable max-len, no-console */\n            warn('Provided WebGL context does not support 32 index buffer, large scenes may not render correctly');\n            /* eslint-enable max-len, no-console */\n            // #endif\n        }\n    }\n}\n","/**\n * Various GL texture/resources formats.\n * @static\n * @name FORMATS\n * @enum {number}\n * @property {number} [RGBA=6408] -\n * @property {number} [RGB=6407] -\n * @property {number} [RG=33319] -\n * @property {number} [RED=6403] -\n * @property {number} [RGBA_INTEGER=36249] -\n * @property {number} [RGB_INTEGER=36248] -\n * @property {number} [RG_INTEGER=33320] -\n * @property {number} [RED_INTEGER=36244] -\n * @property {number} [ALPHA=6406] -\n * @property {number} [LUMINANCE=6409] -\n * @property {number} [LUMINANCE_ALPHA=6410] -\n * @property {number} [DEPTH_COMPONENT=6402] -\n * @property {number} [DEPTH_STENCIL=34041] -\n */\nexport enum GL_FORMATS\n// eslint-disable-next-line @typescript-eslint/indent\n{\n    RGBA = 6408,\n    RGB = 6407,\n    RG = 33319,\n    RED = 6403,\n    RGBA_INTEGER = 36249,\n    RGB_INTEGER = 36248,\n    RG_INTEGER = 33320,\n    RED_INTEGER = 36244,\n    ALPHA = 6406,\n    LUMINANCE = 6409,\n    LUMINANCE_ALPHA = 6410,\n    DEPTH_COMPONENT = 6402,\n    DEPTH_STENCIL = 34041,\n}\n\n/**\n * Various GL target types.\n * @static\n * @name TARGETS\n * @enum {number}\n * @property {number} [TEXTURE_2D=3553] -\n * @property {number} [TEXTURE_CUBE_MAP=34067] -\n * @property {number} [TEXTURE_2D_ARRAY=35866] -\n * @property {number} [TEXTURE_CUBE_MAP_POSITIVE_X=34069] -\n * @property {number} [TEXTURE_CUBE_MAP_NEGATIVE_X=34070] -\n * @property {number} [TEXTURE_CUBE_MAP_POSITIVE_Y=34071] -\n * @property {number} [TEXTURE_CUBE_MAP_NEGATIVE_Y=34072] -\n * @property {number} [TEXTURE_CUBE_MAP_POSITIVE_Z=34073] -\n * @property {number} [TEXTURE_CUBE_MAP_NEGATIVE_Z=34074] -\n */\nexport enum GL_TARGETS\n    // eslint-disable-next-line @typescript-eslint/indent\n {\n    TEXTURE_2D = 3553,\n    TEXTURE_CUBE_MAP = 34067,\n    TEXTURE_2D_ARRAY = 35866,\n    TEXTURE_CUBE_MAP_POSITIVE_X = 34069,\n    TEXTURE_CUBE_MAP_NEGATIVE_X = 34070,\n    TEXTURE_CUBE_MAP_POSITIVE_Y = 34071,\n    TEXTURE_CUBE_MAP_NEGATIVE_Y = 34072,\n    TEXTURE_CUBE_MAP_POSITIVE_Z = 34073,\n    TEXTURE_CUBE_MAP_NEGATIVE_Z = 34074,\n}\n\n/**\n * The wrap modes that are supported by pixi.\n *\n * The {@link settings.WRAP_MODE} wrap mode affects the default wrapping mode of future operations.\n * It can be re-assigned to either CLAMP or REPEAT, depending upon suitability.\n * If the texture is non power of two then clamp will be used regardless as WebGL can\n * only use REPEAT if the texture is po2.\n *\n * This property only affects WebGL.\n * @name WRAP_MODES\n * @static\n * @enum {number}\n * @property {number} CLAMP - The textures uvs are clamped\n * @property {number} REPEAT - The texture uvs tile and repeat\n * @property {number} MIRRORED_REPEAT - The texture uvs tile and repeat with mirroring\n */\nexport enum GL_WRAP_MODES\n    // eslint-disable-next-line @typescript-eslint/indent\n {\n    CLAMP = 33071,\n    REPEAT = 10497,\n    MIRRORED_REPEAT = 33648,\n}\n\nexport enum GL_TYPES\n// eslint-disable-next-line @typescript-eslint/indent\n{\n    /**\n     * 8 bits per channel for gl.RGBA\n     * @default 5121\n     */\n    UNSIGNED_BYTE = 5121,\n    /**\n     * @default 5123\n     */\n    UNSIGNED_SHORT = 5123,\n    /**\n     * 5 red bits, 6 green bits, 5 blue bits.\n     * @default 33635\n     */\n    UNSIGNED_SHORT_5_6_5 = 33635,\n    /**\n     * 4 red bits, 4 green bits, 4 blue bits, 4 alpha bits.\n     * @default 32819\n     */\n    UNSIGNED_SHORT_4_4_4_4 = 32819,\n    /**\n     * 5 red bits, 5 green bits, 5 blue bits, 1 alpha bit.\n     * @default 32820\n     */\n    UNSIGNED_SHORT_5_5_5_1 = 32820,\n    /**\n     * @default 5125\n     */\n    UNSIGNED_INT = 5125,\n    /**\n     * @default 35899\n     */\n    UNSIGNED_INT_10F_11F_11F_REV = 35899,\n    /**\n     * @default 33640\n     */\n    UNSIGNED_INT_2_10_10_10_REV = 33640,\n    /**\n     * @default 34042\n     */\n    UNSIGNED_INT_24_8 = 34042,\n    /**\n     * @default 35902\n     */\n    UNSIGNED_INT_5_9_9_9_REV = 35902,\n    /**\n     * @default 5120\n     */\n    BYTE = 5120,\n    /**\n     * @default 5122\n     */\n    SHORT = 5122,\n    /**\n     * @default 5124\n     */\n    INT = 5124,\n    /**\n     * @default 5126\n     */\n    FLOAT = 5126,\n    /**\n     * @default 36269\n     */\n    FLOAT_32_UNSIGNED_INT_24_8_REV = 36269,\n    /**\n     * @default 36193\n     */\n    HALF_FLOAT = 36193,\n}\n\n","import { GL_TYPES } from '../../texture/const';\n\nimport type { VertexFormat } from '../../../shared/geometry/const';\n\nconst infoMap = {\n    uint8x2: GL_TYPES.UNSIGNED_BYTE,\n    uint8x4: GL_TYPES.UNSIGNED_BYTE,\n    sint8x2: GL_TYPES.BYTE,\n    sint8x4: GL_TYPES.BYTE,\n    unorm8x2: GL_TYPES.UNSIGNED_BYTE,\n    unorm8x4: GL_TYPES.UNSIGNED_BYTE,\n    snorm8x2: GL_TYPES.BYTE,\n    snorm8x4: GL_TYPES.BYTE,\n    uint16x2: GL_TYPES.UNSIGNED_SHORT,\n    uint16x4: GL_TYPES.UNSIGNED_SHORT,\n    sint16x2: GL_TYPES.SHORT,\n    sint16x4: GL_TYPES.SHORT,\n    unorm16x2: GL_TYPES.UNSIGNED_SHORT,\n    unorm16x4: GL_TYPES.UNSIGNED_SHORT,\n    snorm16x2: GL_TYPES.SHORT,\n    snorm16x4: GL_TYPES.SHORT,\n    float16x2: GL_TYPES.HALF_FLOAT,\n    float16x4: GL_TYPES.HALF_FLOAT,\n    float32: GL_TYPES.FLOAT,\n    float32x2: GL_TYPES.FLOAT,\n    float32x3: GL_TYPES.FLOAT,\n    float32x4: GL_TYPES.FLOAT,\n    uint32: GL_TYPES.UNSIGNED_INT,\n    uint32x2: GL_TYPES.UNSIGNED_INT,\n    uint32x3: GL_TYPES.UNSIGNED_INT,\n    uint32x4: GL_TYPES.UNSIGNED_INT,\n    sint32: GL_TYPES.INT,\n    sint32x2: GL_TYPES.INT,\n    sint32x3: GL_TYPES.INT,\n    sint32x4: GL_TYPES.INT\n};\n\nexport function getGlTypeFromFormat(format: VertexFormat): number\n{\n    return infoMap[format] ?? infoMap.float32;\n}\n","import { ExtensionType } from '../../../../extensions/Extensions';\nimport { getAttributeInfoFromFormat } from '../../shared/geometry/utils/getAttributeInfoFromFormat';\nimport { ensureAttributes } from '../shader/program/ensureAttributes';\nimport { getGlTypeFromFormat } from './utils/getGlTypeFromFormat';\n\nimport type { Topology } from '../../shared/geometry/const';\nimport type { Geometry } from '../../shared/geometry/Geometry';\nimport type { System } from '../../shared/system/System';\nimport type { GlRenderingContext } from '../context/GlRenderingContext';\nimport type { GlProgram } from '../shader/GlProgram';\nimport type { WebGLRenderer } from '../WebGLRenderer';\n\nconst topologyToGlMap = {\n    'point-list': 0x0000,\n    'line-list': 0x0001,\n    'line-strip': 0x0003,\n    'triangle-list': 0x0004,\n    'triangle-strip': 0x0005\n};\n\n/**\n * System plugin to the renderer to manage geometry.\n * @memberof rendering\n */\nexport class GlGeometrySystem implements System\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n        ],\n        name: 'geometry',\n    } as const;\n\n    /**\n     * `true` if we has `*_vertex_array_object` extension.\n     * @readonly\n     */\n    public hasVao: boolean;\n\n    /**\n     * `true` if has `ANGLE_instanced_arrays` extension.\n     * @readonly\n     */\n    public hasInstance: boolean;\n\n    protected gl: GlRenderingContext;\n    protected _activeGeometry: Geometry;\n    protected _activeVao: WebGLVertexArrayObject;\n\n    protected _geometryVaoHash: Record<number, Record<string, WebGLVertexArrayObject>> = Object.create(null);\n\n    /** Renderer that owns this {@link GeometrySystem}. */\n    private _renderer: WebGLRenderer;\n\n    /** @param renderer - The renderer this System works for. */\n    constructor(renderer: WebGLRenderer)\n    {\n        this._renderer = renderer;\n        this._activeGeometry = null;\n        this._activeVao = null;\n\n        this.hasVao = true;\n        this.hasInstance = true;\n    }\n\n    /** Sets up the renderer context and necessary buffers. */\n    protected contextChange(): void\n    {\n        const gl = this.gl = this._renderer.gl;\n\n        if (!this._renderer.context.supports.vertexArrayObject)\n        {\n            throw new Error('[PixiJS] Vertex Array Objects are not supported on this device');\n        }\n\n        const nativeVaoExtension = this._renderer.context.extensions.vertexArrayObject;\n\n        if (nativeVaoExtension)\n        {\n            gl.createVertexArray = (): WebGLVertexArrayObject =>\n                nativeVaoExtension.createVertexArrayOES();\n\n            gl.bindVertexArray = (vao): void =>\n                nativeVaoExtension.bindVertexArrayOES(vao);\n\n            gl.deleteVertexArray = (vao): void =>\n                nativeVaoExtension.deleteVertexArrayOES(vao);\n        }\n\n        const nativeInstancedExtension = this._renderer.context.extensions.vertexAttribDivisorANGLE;\n\n        if (nativeInstancedExtension)\n        {\n            gl.drawArraysInstanced = (a, b, c, d): void =>\n            {\n                nativeInstancedExtension.drawArraysInstancedANGLE(a, b, c, d);\n            };\n\n            gl.drawElementsInstanced = (a, b, c, d, e): void =>\n            {\n                nativeInstancedExtension.drawElementsInstancedANGLE(a, b, c, d, e);\n            };\n\n            gl.vertexAttribDivisor = (a, b): void =>\n                nativeInstancedExtension.vertexAttribDivisorANGLE(a, b);\n        }\n\n        this._activeGeometry = null;\n        this._activeVao = null;\n        this._geometryVaoHash = Object.create(null);\n    }\n\n    /**\n     * Binds geometry so that is can be drawn. Creating a Vao if required\n     * @param geometry - Instance of geometry to bind.\n     * @param program - Instance of program to use vao for.\n     */\n    public bind(geometry?: Geometry, program?: GlProgram): void\n    {\n        // shader = shader || this.renderer.shader.shader;\n\n        const gl = this.gl;\n\n        this._activeGeometry = geometry;\n\n        const vao = this.getVao(geometry, program);\n\n        if (this._activeVao !== vao)\n        {\n            this._activeVao = vao;\n\n            gl.bindVertexArray(vao);\n        }\n\n        this.updateBuffers();\n    }\n\n    /** Reset and unbind any active VAO and geometry. */\n    public reset(): void\n    {\n        this.unbind();\n    }\n\n    /** Update buffers of the currently bound geometry. */\n    public updateBuffers(): void\n    {\n        const geometry = this._activeGeometry;\n\n        const bufferSystem = this._renderer.buffer;\n\n        for (let i = 0; i < geometry.buffers.length; i++)\n        {\n            const buffer = geometry.buffers[i];\n\n            bufferSystem.updateBuffer(buffer);\n        }\n    }\n\n    /**\n     * Check compatibility between a geometry and a program\n     * @param geometry - Geometry instance.\n     * @param program - Program instance.\n     */\n    protected checkCompatibility(geometry: Geometry, program: GlProgram): void\n    {\n        // geometry must have at least all the attributes that the shader requires.\n        const geometryAttributes = geometry.attributes;\n        const shaderAttributes = program._attributeData;\n\n        for (const j in shaderAttributes)\n        {\n            if (!geometryAttributes[j])\n            {\n                throw new Error(`shader and geometry incompatible, geometry missing the \"${j}\" attribute`);\n            }\n        }\n    }\n\n    /**\n     * Takes a geometry and program and generates a unique signature for them.\n     * @param geometry - To get signature from.\n     * @param program - To test geometry against.\n     * @returns - Unique signature of the geometry and program\n     */\n    protected getSignature(geometry: Geometry, program: GlProgram): string\n    {\n        const attribs = geometry.attributes;\n        const shaderAttributes = program._attributeData;\n\n        const strings = ['g', geometry.uid];\n\n        for (const i in attribs)\n        {\n            if (shaderAttributes[i])\n            {\n                strings.push(i, shaderAttributes[i].location);\n            }\n        }\n\n        return strings.join('-');\n    }\n\n    protected getVao(geometry: Geometry, program: GlProgram): WebGLVertexArrayObject\n    {\n        return this._geometryVaoHash[geometry.uid]?.[program._key] || this.initGeometryVao(geometry, program);\n    }\n\n    /**\n     * Creates or gets Vao with the same structure as the geometry and stores it on the geometry.\n     * If vao is created, it is bound automatically. We use a shader to infer what and how to set up the\n     * attribute locations.\n     * @param geometry - Instance of geometry to to generate Vao for.\n     * @param program\n     * @param _incRefCount - Increment refCount of all geometry buffers.\n     */\n    protected initGeometryVao(geometry: Geometry, program: GlProgram, _incRefCount = true): WebGLVertexArrayObject\n    {\n        const gl = this._renderer.gl;\n        // const CONTEXT_UID = this.CONTEXT_UID;\n        const bufferSystem = this._renderer.buffer;\n\n        this._renderer.shader._getProgramData(program);\n\n        this.checkCompatibility(geometry, program);\n\n        const signature = this.getSignature(geometry, program);\n\n        if (!this._geometryVaoHash[geometry.uid])\n        {\n            this._geometryVaoHash[geometry.uid] = Object.create(null);\n\n            geometry.on('destroy', this.onGeometryDestroy, this);\n        }\n\n        const vaoObjectHash = this._geometryVaoHash[geometry.uid];\n\n        let vao = vaoObjectHash[signature];\n\n        if (vao)\n        {\n            // this will give us easy access to the vao\n            vaoObjectHash[program._key] = vao;\n\n            return vao;\n        }\n\n        ensureAttributes(geometry, program._attributeData);\n\n        const buffers = geometry.buffers;\n\n        // @TODO: We don't know if VAO is supported.\n        vao = gl.createVertexArray();\n\n        gl.bindVertexArray(vao);\n\n        // first update - and create the buffers!\n        // only create a gl buffer if it actually gets\n        for (let i = 0; i < buffers.length; i++)\n        {\n            const buffer = buffers[i];\n\n            bufferSystem.bind(buffer);\n        }\n\n        // TODO - maybe make this a data object?\n        // lets wait to see if we need to first!\n\n        this.activateVao(geometry, program);\n\n        // add it to the cache!\n        vaoObjectHash[program._key] = vao;\n        vaoObjectHash[signature] = vao;\n\n        gl.bindVertexArray(null);\n\n        return vao;\n    }\n\n    /**\n     * Disposes geometry.\n     * @param geometry - Geometry with buffers. Only VAO will be disposed\n     * @param [contextLost=false] - If context was lost, we suppress deleteVertexArray\n     */\n    protected onGeometryDestroy(geometry: Geometry, contextLost?: boolean): void\n    {\n        const vaoObjectHash = this._geometryVaoHash[geometry.uid];\n\n        const gl = this.gl;\n\n        if (vaoObjectHash)\n        {\n            if (contextLost)\n            {\n                for (const i in vaoObjectHash)\n                {\n                    if (this._activeVao !== vaoObjectHash[i])\n                    {\n                        this.unbind();\n                    }\n\n                    gl.deleteVertexArray(vaoObjectHash[i]);\n                }\n            }\n\n            this._geometryVaoHash[geometry.uid] = null;\n        }\n    }\n\n    /**\n     * Dispose all WebGL resources of all managed geometries.\n     * @param [contextLost=false] - If context was lost, we suppress `gl.delete` calls\n     */\n    public destroyAll(contextLost = false): void\n    {\n        const gl = this.gl;\n\n        for (const i in this._geometryVaoHash)\n        {\n            if (contextLost)\n            {\n                for (const j in this._geometryVaoHash[i])\n                {\n                    const vaoObjectHash = this._geometryVaoHash[i];\n\n                    if (this._activeVao !== vaoObjectHash)\n                    {\n                        this.unbind();\n                    }\n\n                    gl.deleteVertexArray(vaoObjectHash[j]);\n                }\n            }\n\n            this._geometryVaoHash[i] = null;\n        }\n    }\n\n    /**\n     * Activate vertex array object.\n     * @param geometry - Geometry instance.\n     * @param program - Shader program instance.\n     */\n    protected activateVao(geometry: Geometry, program: GlProgram): void\n    {\n        const gl = this._renderer.gl;\n\n        const bufferSystem = this._renderer.buffer;\n        const attributes = geometry.attributes;\n\n        if (geometry.indexBuffer)\n        {\n            // first update the index buffer if we have one..\n            bufferSystem.bind(geometry.indexBuffer);\n        }\n\n        let lastBuffer = null;\n\n        // add a new one!\n        for (const j in attributes)\n        {\n            const attribute = attributes[j];\n            const buffer = attribute.buffer;\n            const glBuffer = bufferSystem.getGlBuffer(buffer);\n            const programAttrib = program._attributeData[j];\n\n            if (programAttrib)\n            {\n                if (lastBuffer !== glBuffer)\n                {\n                    bufferSystem.bind(buffer);\n\n                    lastBuffer = glBuffer;\n                }\n\n                const location = attribute.location;\n\n                // TODO introduce state again\n                // we can optimise this for older devices that have no VAOs\n                gl.enableVertexAttribArray(location);\n\n                const attributeInfo = getAttributeInfoFromFormat(attribute.format);\n\n                const type = getGlTypeFromFormat(attribute.format);\n\n                if (programAttrib.format?.substring(1, 4) === 'int')\n                {\n                    gl.vertexAttribIPointer(location,\n                        attributeInfo.size,\n                        type,\n                        attribute.stride,\n                        attribute.offset);\n                }\n                else\n                {\n                    gl.vertexAttribPointer(location,\n                        attributeInfo.size,\n                        type,\n                        attributeInfo.normalised,\n                        attribute.stride,\n                        attribute.offset);\n                }\n\n                if (attribute.instance)\n                {\n                    // TODO calculate instance count based of this...\n                    if (this.hasInstance)\n                    {\n                        gl.vertexAttribDivisor(location, 1);// attribute.divisor);\n                    }\n                    else\n                    {\n                        throw new Error('geometry error, GPU Instancing is not supported on this device');\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Draws the currently bound geometry.\n     * @param topology - The type primitive to render.\n     * @param size - The number of elements to be rendered. If not specified, all vertices after the\n     *  starting vertex will be drawn.\n     * @param start - The starting vertex in the geometry to start drawing from. If not specified,\n     *  drawing will start from the first vertex.\n     * @param instanceCount - The number of instances of the set of elements to execute. If not specified,\n     *  all instances will be drawn.\n     */\n    public draw(topology?: Topology, size?: number, start?: number, instanceCount?: number): this\n    {\n        const { gl } = this._renderer;\n        const geometry = this._activeGeometry;\n\n        const glTopology = topologyToGlMap[geometry.topology || topology];\n\n        instanceCount ||= geometry.instanceCount;\n\n        if (geometry.indexBuffer)\n        {\n            const byteSize = geometry.indexBuffer.data.BYTES_PER_ELEMENT;\n            const glType = byteSize === 2 ? gl.UNSIGNED_SHORT : gl.UNSIGNED_INT;\n\n            if (instanceCount > 1)\n            {\n                /* eslint-disable max-len */\n                gl.drawElementsInstanced(glTopology, size || geometry.indexBuffer.data.length, glType, (start || 0) * byteSize, instanceCount);\n                /* eslint-enable max-len */\n            }\n            else\n            {\n                /* eslint-disable max-len */\n                gl.drawElements(glTopology, size || geometry.indexBuffer.data.length, glType, (start || 0) * byteSize);\n                /* eslint-enable max-len */\n            }\n        }\n        else if (instanceCount > 1)\n        {\n            // TODO need a better way to calculate size..\n            gl.drawArraysInstanced(glTopology, start || 0, size || geometry.getSize(), instanceCount);\n        }\n        else\n        {\n            gl.drawArrays(glTopology, start || 0, size || geometry.getSize());\n        }\n\n        return this;\n    }\n\n    /** Unbind/reset everything. */\n    protected unbind(): void\n    {\n        this.gl.bindVertexArray(null);\n        this._activeVao = null;\n        this._activeGeometry = null;\n    }\n\n    public destroy(): void\n    {\n        this._renderer = null;\n        this.gl = null;\n        this._activeVao = null;\n        this._activeGeometry = null;\n    }\n}\n","import { ExtensionType } from '../../../extensions/Extensions';\nimport { warn } from '../../../utils/logging/warn';\nimport { Geometry } from '../shared/geometry/Geometry';\nimport { Shader } from '../shared/shader/Shader';\nimport { State } from '../shared/state/State';\nimport { TextureSource } from '../shared/texture/sources/TextureSource';\nimport { Texture } from '../shared/texture/Texture';\nimport { GlProgram } from './shader/GlProgram';\n\nimport type { RenderOptions } from '../shared/system/AbstractRenderer';\nimport type { System } from '../shared/system/System';\nimport type { WebGLRenderer } from './WebGLRenderer';\n\nconst bigTriangleGeometry = new Geometry({\n    attributes: {\n        aPosition: [\n            -1.0, -1.0, // Bottom left corner\n            3.0, -1.0, // Bottom right corner, extending beyond right edge\n            -1.0, 3.0 // Top left corner, extending beyond top edge\n        ],\n    },\n});\n\n/**\n * The options for the back buffer system.\n * @memberof rendering\n * @property {boolean} [useBackBuffer=false] - if true will use the back buffer where required\n * @property {boolean} [antialias=false] - if true will ensure the texture is antialiased\n */\nexport interface GlBackBufferOptions\n{\n    /**\n     * if true will use the back buffer where required\n     * @default false\n     * @memberof rendering.WebGLOptions\n     */\n    useBackBuffer?: boolean;\n    /** if true will ensure the texture is antialiased */\n    antialias?: boolean;\n}\n\n/**\n * For blend modes you need to know what pixels you are actually drawing to. For this to be possible in WebGL\n * we need to render to a texture and then present that texture to the screen. This system manages that process.\n *\n * As the main scene is rendered to a texture, it means we can sample it anc copy its pixels,\n * something not possible on the main canvas.\n *\n * If antialiasing is set to to true and useBackBuffer is set to true, then the back buffer will be antialiased.\n * and the main gl context will not.\n *\n * You only need to activate this back buffer if you are using a blend mode that requires it.\n *\n * to activate is simple, you pass `useBackBuffer:true` to your render options\n * @memberof rendering\n */\nexport class GlBackBufferSystem implements System<GlBackBufferOptions>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n        ],\n        name: 'backBuffer',\n        priority: 1\n    } as const;\n\n    /** default options for the back buffer system */\n    public static defaultOptions: GlBackBufferOptions = {\n        /** if true will use the back buffer where required */\n        useBackBuffer: false,\n    };\n\n    /** if true, the back buffer is used */\n    public useBackBuffer = false;\n\n    private _backBufferTexture: Texture;\n    private readonly _renderer: WebGLRenderer;\n    private _targetTexture: TextureSource;\n    private _useBackBufferThisRender = false;\n    private _antialias: boolean;\n    private _state: State;\n    private _bigTriangleShader: Shader;\n\n    constructor(renderer: WebGLRenderer)\n    {\n        this._renderer = renderer;\n    }\n\n    public init(options: GlBackBufferOptions = {})\n    {\n        const { useBackBuffer, antialias } = { ...GlBackBufferSystem.defaultOptions, ...options };\n\n        this.useBackBuffer = useBackBuffer;\n\n        this._antialias = antialias;\n\n        if (!this._renderer.context.supports.msaa)\n        {\n            warn('antialiasing, is not supported on when using the back buffer');\n\n            this._antialias = false;\n        }\n\n        this._state = State.for2d();\n\n        const bigTriangleProgram = new GlProgram({\n            vertex: `\n                attribute vec2 aPosition;\n                out vec2 vUv;\n\n                void main() {\n                    gl_Position = vec4(aPosition, 0.0, 1.0);\n\n                    vUv = (aPosition + 1.0) / 2.0;\n\n                    // flip dem UVs\n                    vUv.y = 1.0 - vUv.y;\n                }`,\n            fragment: `\n                in vec2 vUv;\n                out vec4 finalColor;\n\n                uniform sampler2D uTexture;\n\n                void main() {\n                    finalColor = texture(uTexture, vUv);\n                }`,\n            name: 'big-triangle',\n        });\n\n        this._bigTriangleShader = new Shader({\n            glProgram: bigTriangleProgram,\n            resources: {\n                uTexture: Texture.WHITE.source,\n            },\n        });\n    }\n\n    /**\n     * This is called before the RenderTargetSystem is started. This is where\n     * we replace the target with the back buffer if required.\n     * @param options - The options for this render.\n     */\n    protected renderStart(options: RenderOptions)\n    {\n        const renderTarget = this._renderer.renderTarget.getRenderTarget(options.target);\n\n        this._useBackBufferThisRender = this.useBackBuffer && !!renderTarget.isRoot;\n\n        if (this._useBackBufferThisRender)\n        {\n            const renderTarget = this._renderer.renderTarget.getRenderTarget(options.target);\n\n            this._targetTexture = renderTarget.colorTexture;\n\n            options.target = this._getBackBufferTexture(renderTarget.colorTexture);\n        }\n    }\n\n    protected renderEnd()\n    {\n        this._presentBackBuffer();\n    }\n\n    private _presentBackBuffer()\n    {\n        const renderer = this._renderer;\n\n        renderer.renderTarget.finishRenderPass();\n\n        if (!this._useBackBufferThisRender) return;\n\n        renderer.renderTarget.bind(this._targetTexture, false);\n\n        this._bigTriangleShader.resources.uTexture = this._backBufferTexture.source;\n\n        renderer.encoder.draw({\n            geometry: bigTriangleGeometry,\n            shader: this._bigTriangleShader,\n            state: this._state,\n        });\n    }\n\n    private _getBackBufferTexture(targetSourceTexture: TextureSource)\n    {\n        this._backBufferTexture = this._backBufferTexture || new Texture({\n            source: new TextureSource({\n                width: targetSourceTexture.width,\n                height: targetSourceTexture.height,\n                resolution: targetSourceTexture._resolution,\n                antialias: this._antialias,\n            }),\n        });\n\n        // this will not resize if its the same size already! No extra check required\n        this._backBufferTexture.source.resize(\n            targetSourceTexture.width,\n            targetSourceTexture.height,\n            targetSourceTexture._resolution,\n        );\n\n        return this._backBufferTexture;\n    }\n\n    /** destroys the back buffer */\n    public destroy()\n    {\n        if (this._backBufferTexture)\n        {\n            this._backBufferTexture.destroy();\n            this._backBufferTexture = null;\n        }\n    }\n}\n","import { ExtensionType } from '../../../extensions/Extensions';\n\nimport type { System } from '../shared/system/System';\nimport type { WebGLRenderer } from './WebGLRenderer';\n\n/**\n * The system that handles color masking for the WebGL.\n * @memberof rendering\n */\nexport class GlColorMaskSystem implements System\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n        ],\n        name: 'colorMask',\n    } as const;\n\n    private readonly _renderer: WebGLRenderer;\n    private _colorMaskCache = 0b1111;\n\n    constructor(renderer: WebGLRenderer)\n    {\n        this._renderer = renderer;\n    }\n\n    public setMask(colorMask: number)\n    {\n        if (this._colorMaskCache === colorMask) return;\n        this._colorMaskCache = colorMask;\n\n        this._renderer.gl.colorMask(\n            !!(colorMask & 0b1000),\n            !!(colorMask & 0b0100),\n            !!(colorMask & 0b0010),\n            !!(colorMask & 0b0001)\n        );\n    }\n\n    public destroy?: () => void;\n}\n","import { ExtensionType } from '../../../extensions/Extensions';\n\nimport type { Topology } from '../shared/geometry/const';\nimport type { Geometry } from '../shared/geometry/Geometry';\nimport type { Shader } from '../shared/shader/Shader';\nimport type { State } from '../shared/state/State';\nimport type { System } from '../shared/system/System';\nimport type { WebGLRenderer } from './WebGLRenderer';\n\n/**\n * The system that handles encoding commands for the WebGL.\n * @memberof rendering\n */\nexport class GlEncoderSystem implements System\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n        ],\n        name: 'encoder',\n    } as const;\n\n    public readonly commandFinished = Promise.resolve();\n    private readonly _renderer: WebGLRenderer;\n\n    constructor(renderer: WebGLRenderer)\n    {\n        this._renderer = renderer;\n    }\n\n    public setGeometry(geometry: Geometry, shader?: Shader)\n    {\n        this._renderer.geometry.bind(geometry, shader.glProgram);\n    }\n\n    public finishRenderPass()\n    {\n        // noop\n    }\n\n    public draw(options: {\n        geometry: Geometry,\n        shader: Shader,\n        state?: State,\n        topology?: Topology,\n        size?: number,\n        start?: number,\n        instanceCount?: number\n        skipSync?: boolean,\n    })\n    {\n        const renderer = this._renderer;\n        const { geometry, shader, state, skipSync, topology: type, size, start, instanceCount } = options;\n\n        renderer.shader.bind(shader, skipSync);\n\n        renderer.geometry.bind(geometry, renderer.shader._activeProgram);\n\n        if (state)\n        {\n            renderer.state.set(state);\n        }\n\n        renderer.geometry.draw(type, size, start, instanceCount ?? geometry.instanceCount);\n    }\n\n    public destroy()\n    {\n        (this._renderer as null) = null;\n    }\n}\n","import { ExtensionType } from '../../../extensions/Extensions';\nimport { GpuStencilModesToPixi } from '../gpu/state/GpuStencilModesToPixi';\nimport { STENCIL_MODES } from '../shared/state/const';\n\nimport type { RenderTarget } from '../shared/renderTarget/RenderTarget';\nimport type { System } from '../shared/system/System';\nimport type { WebGLRenderer } from './WebGLRenderer';\n\n/**\n * This manages the stencil buffer. Used primarily for masking\n * @memberof rendering\n */\nexport class GlStencilSystem implements System\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n        ],\n        name: 'stencil',\n    } as const;\n\n    private _gl: WebGLRenderingContext;\n\n    private readonly _stencilCache = {\n        enabled: false,\n        stencilReference: 0,\n        stencilMode: STENCIL_MODES.NONE,\n    };\n\n    private _renderTargetStencilState: Record<number, {\n        stencilMode: STENCIL_MODES;\n        stencilReference: number;\n    }> = Object.create(null);\n\n    private _stencilOpsMapping: {\n        keep: number;\n        zero: number;\n        replace: number;\n        invert: number;\n        'increment-clamp': number;\n        'decrement-clamp': number;\n        'increment-wrap': number;\n        'decrement-wrap': number;\n    };\n\n    private _comparisonFuncMapping: {\n        always: number;\n        never: number;\n        equal: number;\n        'not-equal': number;\n        less: number;\n        'less-equal': number;\n        greater: number;\n        'greater-equal': number;\n    };\n\n    private _activeRenderTarget: RenderTarget;\n\n    constructor(renderer: WebGLRenderer)\n    {\n        renderer.renderTarget.onRenderTargetChange.add(this);\n    }\n\n    protected contextChange(gl: WebGLRenderingContext)\n    {\n        // TODO - this could be declared in a gl const\n        // we know the numbers don't tend to change!\n        this._gl = gl;\n\n        this._comparisonFuncMapping = {\n            always: gl.ALWAYS,\n            never: gl.NEVER,\n            equal: gl.EQUAL,\n            'not-equal': gl.NOTEQUAL,\n            less: gl.LESS,\n            'less-equal': gl.LEQUAL,\n            greater: gl.GREATER,\n            'greater-equal': gl.GEQUAL,\n        };\n\n        this._stencilOpsMapping = {\n            keep: gl.KEEP,\n            zero: gl.ZERO,\n            replace: gl.REPLACE,\n            invert: gl.INVERT,\n            'increment-clamp': gl.INCR,\n            'decrement-clamp': gl.DECR,\n            'increment-wrap': gl.INCR_WRAP,\n            'decrement-wrap': gl.DECR_WRAP,\n        };\n\n        // reset stencil cache\n        this._stencilCache.enabled = false;\n        this._stencilCache.stencilMode = STENCIL_MODES.NONE;\n        this._stencilCache.stencilReference = 0;\n    }\n\n    protected onRenderTargetChange(renderTarget: RenderTarget)\n    {\n        if (this._activeRenderTarget === renderTarget) return;\n\n        this._activeRenderTarget = renderTarget;\n\n        let stencilState = this._renderTargetStencilState[renderTarget.uid];\n\n        if (!stencilState)\n        {\n            stencilState = this._renderTargetStencilState[renderTarget.uid] = {\n                stencilMode: STENCIL_MODES.DISABLED,\n                stencilReference: 0,\n            };\n        }\n\n        // restore the current render targets stencil state..\n        this.setStencilMode(stencilState.stencilMode, stencilState.stencilReference);\n    }\n\n    public setStencilMode(stencilMode: STENCIL_MODES, stencilReference: number)\n    {\n        const stencilState = this._renderTargetStencilState[this._activeRenderTarget.uid];\n\n        const gl = this._gl;\n        const mode = GpuStencilModesToPixi[stencilMode];\n\n        const _stencilCache = this._stencilCache;\n\n        // store the stencil state for restoration later, if a render target changes\n        stencilState.stencilMode = stencilMode;\n        stencilState.stencilReference = stencilReference;\n\n        if (stencilMode === STENCIL_MODES.DISABLED)\n        {\n            if (this._stencilCache.enabled)\n            {\n                this._stencilCache.enabled = false;\n\n                gl.disable(gl.STENCIL_TEST);\n            }\n\n            return;\n        }\n\n        if (!this._stencilCache.enabled)\n        {\n            this._stencilCache.enabled = true;\n            gl.enable(gl.STENCIL_TEST);\n        }\n\n        if (stencilMode !== _stencilCache.stencilMode || _stencilCache.stencilReference !== stencilReference)\n        {\n            _stencilCache.stencilMode = stencilMode;\n            _stencilCache.stencilReference = stencilReference;\n\n            // this is pretty simple mapping.\n            // will work for pixi's simple mask cases.\n            // although a true mapping of the GPU state to webGL state should be done\n            gl.stencilFunc(this._comparisonFuncMapping[mode.stencilBack.compare], stencilReference, 0xFF);\n            gl.stencilOp(gl.KEEP, gl.KEEP, this._stencilOpsMapping[mode.stencilBack.passOp]);\n        }\n    }\n\n    public destroy?: () => void;\n}\n","import type { UboElement, UboLayout, UniformData } from '../../../shared/shader/types';\n\nexport const WGSL_TO_STD40_SIZE: Record<string, number> = {\n    f32: 4,\n    'vec2<f32>': 8,\n    'vec3<f32>': 12,\n    'vec4<f32>': 16,\n\n    'mat2x2<f32>': 16 * 2,\n    'mat3x3<f32>': 16 * 3,\n    'mat4x4<f32>': 16 * 4,\n\n    // TODO - not essential for now but support these in the future\n    // int:      4,\n    // ivec2:    8,\n    // ivec3:    12,\n    // ivec4:    16,\n\n    // uint:     4,\n    // uvec2:    8,\n    // uvec3:    12,\n    // uvec4:    16,\n\n    // bool:     4,\n    // bvec2:    8,\n    // bvec3:    12,\n    // bvec4:    16,\n\n    // mat2:     16 * 2,\n    // mat3:     16 * 3,\n    // mat4:     16 * 4,\n};\n\nexport function createUboElementsSTD40(uniformData: UniformData[]): UboLayout\n{\n    const uboElements: UboElement[] = uniformData.map((data: UniformData) =>\n        ({\n            data,\n            offset: 0,\n            size: 0,\n        }));\n\n    let size = 0;\n    let chunkSize = 0;\n    let offset = 0;\n\n    for (let i = 0; i < uboElements.length; i++)\n    {\n        const uboElement = uboElements[i];\n\n        size = WGSL_TO_STD40_SIZE[uboElement.data.type];\n\n        if (!size)\n        {\n            throw new Error(`Unknown type ${uboElement.data.type}`);\n        }\n\n        if (uboElement.data.size > 1)\n        {\n            size = Math.max(size, 16) * uboElement.data.size;\n        }\n\n        uboElement.size = size;\n\n        // add some size offset..\n        // must align to the nearest 16 bytes or internally nearest round size\n        if (chunkSize % size !== 0 && chunkSize < 16)\n        {\n            // diff required to line up..\n            const lineUpValue = (chunkSize % size) % 16;\n\n            chunkSize += lineUpValue;\n            offset += lineUpValue;\n        }\n\n        if ((chunkSize + size) > 16)\n        {\n            offset = Math.ceil(offset / 16) * 16;\n            uboElement.offset = offset;\n            offset += size;\n            chunkSize = size;\n        }\n        else\n        {\n            uboElement.offset = offset;\n            chunkSize += size;\n            offset += size;\n        }\n    }\n\n    offset = Math.ceil(offset / 16) * 16;\n\n    return { uboElements, size: offset };\n}\n\n","import { WGSL_TO_STD40_SIZE } from './createUboElementsSTD40';\n\nimport type { UboElement } from '../../../shared/shader/types';\n\n/**\n * This generates a function that will sync an array to the uniform buffer\n * following the std140 layout\n * @param uboElement - the element to generate the array sync for\n * @param offsetToAdd - the offset to append at the start of the code\n * @returns - the generated code\n */\nexport function generateArraySyncSTD40(uboElement: UboElement, offsetToAdd: number): string\n{\n    const rowSize = Math.max(WGSL_TO_STD40_SIZE[uboElement.data.type] / 16, 1);\n    const elementSize = (uboElement.data.value as Array<number>).length / uboElement.data.size;// size / rowSize;\n\n    const remainder = (4 - (elementSize % 4)) % 4;\n\n    return `\n        v = uv.${uboElement.data.name};\n        offset += ${offsetToAdd};\n\n        arrayOffset = offset;\n\n        t = 0;\n\n        for(var i=0; i < ${uboElement.data.size * rowSize}; i++)\n        {\n            for(var j = 0; j < ${elementSize}; j++)\n            {\n                data[arrayOffset++] = v[t++];\n            }\n            ${remainder !== 0 ? `arrayOffset += ${remainder};` : ''}\n        }\n    `;\n}\n","/* eslint-disable quote-props */\n\nimport { createUboSyncFunction } from '../../../shared/shader/utils/createUboSyncFunction';\nimport { uboSyncFunctionsSTD40 } from '../../../shared/shader/utils/uboSyncFunctions';\nimport { generateArraySyncSTD40 } from './generateArraySyncSTD40';\n\nimport type { UboElement, UniformsSyncCallback } from '../../../shared/shader/types';\n\nexport function createUboSyncFunctionSTD40(\n    uboElements: UboElement[],\n): UniformsSyncCallback\n{\n    return createUboSyncFunction(\n        uboElements,\n        'uboStd40',\n        generateArraySyncSTD40,\n        uboSyncFunctionsSTD40,\n    );\n}\n","import { ExtensionType } from '../../../extensions/Extensions';\nimport { UboSystem } from '../shared/shader/UboSystem';\nimport { createUboElementsSTD40 } from './shader/utils/createUboElementsSTD40';\nimport { createUboSyncFunctionSTD40 } from './shader/utils/createUboSyncSTD40';\n\n/**\n * System plugin to the renderer to manage uniform buffers. But with an WGSL adaptor.\n * @memberof rendering\n */\nexport class GlUboSystem extends UboSystem\n{\n    /** @ignore */\n    public static extension = {\n        type: [ExtensionType.WebGLSystem],\n        name: 'ubo',\n    } as const;\n\n    constructor()\n    {\n        super({\n            createUboElements: createUboElementsSTD40,\n            generateUboSync: createUboSyncFunctionSTD40,\n        });\n    }\n}\n","/**\n * Represents a render target.\n * @memberof rendering\n * @ignore\n */\nexport class GlRenderTarget\n{\n    public width = -1;\n    public height = -1;\n    public msaa = false;\n    public framebuffer: WebGLFramebuffer;\n    public resolveTargetFramebuffer: WebGLFramebuffer;\n    public msaaRenderBuffer: WebGLRenderbuffer[] = [];\n    public depthStencilRenderBuffer: WebGLRenderbuffer;\n}\n","import { Rectangle } from '../../../../maths/shapes/Rectangle';\nimport { warn } from '../../../../utils/logging/warn';\nimport { CLEAR } from '../const';\nimport { GlRenderTarget } from '../GlRenderTarget';\n\nimport type { RgbaArray } from '../../../../color/Color';\nimport type { RenderTarget } from '../../shared/renderTarget/RenderTarget';\nimport type { RenderTargetAdaptor, RenderTargetSystem } from '../../shared/renderTarget/RenderTargetSystem';\nimport type { Texture } from '../../shared/texture/Texture';\nimport type { CLEAR_OR_BOOL } from '../const';\nimport type { WebGLRenderer } from '../WebGLRenderer';\n\n/**\n * The WebGL adaptor for the render target system. Allows the Render Target System to be used with the WebGL renderer\n * @memberof rendering\n * @ignore\n */\nexport class GlRenderTargetAdaptor implements RenderTargetAdaptor<GlRenderTarget>\n{\n    private _renderTargetSystem: RenderTargetSystem<GlRenderTarget>;\n    private _renderer: WebGLRenderer<HTMLCanvasElement>;\n    private _clearColorCache: RgbaArray = [0, 0, 0, 0];\n    private _viewPortCache: Rectangle = new Rectangle();\n\n    public init(renderer: WebGLRenderer, renderTargetSystem: RenderTargetSystem<GlRenderTarget>): void\n    {\n        this._renderer = renderer;\n        this._renderTargetSystem = renderTargetSystem;\n\n        renderer.runners.contextChange.add(this);\n    }\n\n    public contextChange(): void\n    {\n        this._clearColorCache = [0, 0, 0, 0];\n        this._viewPortCache = new Rectangle();\n    }\n\n    public copyToTexture(\n        sourceRenderSurfaceTexture: RenderTarget,\n        destinationTexture: Texture,\n        originSrc: { x: number; y: number; },\n        size: { width: number; height: number; },\n        originDest: { x: number; y: number; },\n    )\n    {\n        const renderTargetSystem = this._renderTargetSystem;\n\n        const renderer = this._renderer;\n        const glRenderTarget = renderTargetSystem.getGpuRenderTarget(sourceRenderSurfaceTexture);\n        const gl = renderer.gl;\n\n        this.finishRenderPass(sourceRenderSurfaceTexture);\n\n        gl.bindFramebuffer(gl.FRAMEBUFFER, glRenderTarget.resolveTargetFramebuffer);\n\n        renderer.texture.bind(destinationTexture, 0);\n\n        gl.copyTexSubImage2D(gl.TEXTURE_2D, 0,\n            originDest.x, originDest.y,\n            originSrc.x,\n            originSrc.y,\n            size.width,\n            size.height\n        );\n\n        return destinationTexture;\n    }\n\n    public startRenderPass(\n        renderTarget: RenderTarget,\n        clear: CLEAR_OR_BOOL = true,\n        clearColor?: RgbaArray,\n        viewport?: Rectangle\n    )\n    {\n        const renderTargetSystem = this._renderTargetSystem;\n\n        const source = renderTarget.colorTexture;\n        const gpuRenderTarget = renderTargetSystem.getGpuRenderTarget(renderTarget);\n\n        let viewPortY = viewport.y;\n\n        if (renderTarget.isRoot)\n        {\n            // /TODO this is the same logic?\n            viewPortY = source.pixelHeight - viewport.height;\n        }\n\n        // unbind the current render texture..\n        renderTarget.colorTextures.forEach((texture) =>\n        {\n            this._renderer.texture.unbind(texture);\n        });\n\n        const gl = this._renderer.gl;\n\n        gl.bindFramebuffer(gl.FRAMEBUFFER, gpuRenderTarget.framebuffer);\n\n        const viewPortCache = this._viewPortCache;\n\n        if (viewPortCache.x !== viewport.x\n            || viewPortCache.y !== viewPortY\n            || viewPortCache.width !== viewport.width\n            || viewPortCache.height !== viewport.height)\n        {\n            viewPortCache.x = viewport.x;\n            viewPortCache.y = viewPortY;\n            viewPortCache.width = viewport.width;\n            viewPortCache.height = viewport.height;\n\n            gl.viewport(\n                viewport.x,\n                viewPortY,\n                viewport.width,\n                viewport.height,\n            );\n        }\n\n        // if the stencil buffer has been requested, we need to create a stencil buffer\n        if (!gpuRenderTarget.depthStencilRenderBuffer && (renderTarget.stencil || renderTarget.depth))\n        {\n            this._initStencil(gpuRenderTarget);\n        }\n\n        this.clear(renderTarget, clear, clearColor);\n    }\n\n    public finishRenderPass(renderTarget?: RenderTarget)\n    {\n        const renderTargetSystem = this._renderTargetSystem;\n\n        const glRenderTarget = renderTargetSystem.getGpuRenderTarget(renderTarget);\n\n        if (!glRenderTarget.msaa) return;\n\n        const gl = this._renderer.gl;\n\n        gl.bindFramebuffer(gl.FRAMEBUFFER, glRenderTarget.resolveTargetFramebuffer);\n        gl.bindFramebuffer(gl.READ_FRAMEBUFFER, glRenderTarget.framebuffer);\n\n        gl.blitFramebuffer(\n            0, 0, glRenderTarget.width, glRenderTarget.height,\n            0, 0, glRenderTarget.width, glRenderTarget.height,\n            gl.COLOR_BUFFER_BIT, gl.NEAREST,\n        );\n\n        gl.bindFramebuffer(gl.FRAMEBUFFER, glRenderTarget.framebuffer);\n\n        // dont think we need this anymore? keeping around just in case the wheels fall off\n        // gl.bindFramebuffer(gl.READ_FRAMEBUFFER, null);\n    }\n\n    public initGpuRenderTarget(renderTarget: RenderTarget): GlRenderTarget\n    {\n        const renderer = this._renderer;\n\n        const gl = renderer.gl;\n\n        // do single...\n\n        const glRenderTarget = new GlRenderTarget();\n\n        // we are rendering to the main canvas..\n        if (renderTarget.colorTexture.resource === renderer.gl.canvas)\n        {\n            glRenderTarget.framebuffer = null;\n\n            return glRenderTarget;\n        }\n\n        this._initColor(renderTarget, glRenderTarget);\n\n        // set up a depth texture..\n\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n\n        return glRenderTarget;\n    }\n\n    public destroyGpuRenderTarget(gpuRenderTarget: GlRenderTarget)\n    {\n        const gl = this._renderer.gl;\n\n        if (gpuRenderTarget.framebuffer)\n        {\n            gl.deleteFramebuffer(gpuRenderTarget.framebuffer);\n            gpuRenderTarget.framebuffer = null;\n        }\n\n        if (gpuRenderTarget.resolveTargetFramebuffer)\n        {\n            gl.deleteFramebuffer(gpuRenderTarget.resolveTargetFramebuffer);\n            gpuRenderTarget.resolveTargetFramebuffer = null;\n        }\n\n        if (gpuRenderTarget.depthStencilRenderBuffer)\n        {\n            gl.deleteRenderbuffer(gpuRenderTarget.depthStencilRenderBuffer);\n            gpuRenderTarget.depthStencilRenderBuffer = null;\n        }\n\n        gpuRenderTarget.msaaRenderBuffer.forEach((renderBuffer) =>\n        {\n            gl.deleteRenderbuffer(renderBuffer);\n        });\n\n        gpuRenderTarget.msaaRenderBuffer = null;\n    }\n\n    public clear(_renderTarget: RenderTarget, clear: CLEAR_OR_BOOL, clearColor?: RgbaArray)\n    {\n        if (!clear) return;\n\n        const renderTargetSystem = this._renderTargetSystem;\n\n        // if clear is boolean..\n        if (typeof clear === 'boolean')\n        {\n            clear = clear ? CLEAR.ALL : CLEAR.NONE;\n        }\n\n        const gl = this._renderer.gl;\n\n        if (clear & CLEAR.COLOR)\n        {\n            clearColor ??= renderTargetSystem.defaultClearColor;\n\n            const clearColorCache = this._clearColorCache;\n            const clearColorArray = clearColor as number[];\n\n            if (clearColorCache[0] !== clearColorArray[0]\n                || clearColorCache[1] !== clearColorArray[1]\n                || clearColorCache[2] !== clearColorArray[2]\n                || clearColorCache[3] !== clearColorArray[3])\n            {\n                clearColorCache[0] = clearColorArray[0];\n                clearColorCache[1] = clearColorArray[1];\n                clearColorCache[2] = clearColorArray[2];\n                clearColorCache[3] = clearColorArray[3];\n\n                gl.clearColor(clearColorArray[0], clearColorArray[1], clearColorArray[2], clearColorArray[3]);\n            }\n        }\n\n        gl.clear(clear);\n    }\n\n    public resizeGpuRenderTarget(renderTarget: RenderTarget)\n    {\n        if (renderTarget.isRoot) return;\n\n        const renderTargetSystem = this._renderTargetSystem;\n\n        const glRenderTarget = renderTargetSystem.getGpuRenderTarget(renderTarget);\n\n        this._resizeColor(renderTarget, glRenderTarget);\n\n        if (renderTarget.stencil)\n        {\n            this._resizeStencil(glRenderTarget);\n        }\n    }\n\n    private _initColor(renderTarget: RenderTarget, glRenderTarget: GlRenderTarget)\n    {\n        const renderer = this._renderer;\n\n        const gl = renderer.gl;\n        // deal with our outputs..\n        const resolveTargetFramebuffer = gl.createFramebuffer();\n\n        glRenderTarget.resolveTargetFramebuffer = resolveTargetFramebuffer;\n\n        // set up the texture..\n        gl.bindFramebuffer(gl.FRAMEBUFFER, resolveTargetFramebuffer);\n\n        glRenderTarget.width = renderTarget.colorTexture.source.pixelWidth;\n        glRenderTarget.height = renderTarget.colorTexture.source.pixelHeight;\n\n        renderTarget.colorTextures.forEach((colorTexture, i) =>\n        {\n            const source = colorTexture.source;\n\n            if (source.antialias)\n            {\n                if (renderer.context.supports.msaa)\n                {\n                    glRenderTarget.msaa = true;\n                }\n                else\n                {\n                    warn('[RenderTexture] Antialiasing on textures is not supported in WebGL1');\n                }\n            }\n\n            // TODO bindSource could return the glTexture\n            renderer.texture.bindSource(source, 0);\n            const glSource = renderer.texture.getGlSource(source);\n\n            const glTexture = glSource.texture;\n\n            gl.framebufferTexture2D(gl.FRAMEBUFFER,\n                gl.COLOR_ATTACHMENT0 + i,\n                3553, // texture.target,\n                glTexture,\n                0);// mipLevel);\n        });\n\n        if (glRenderTarget.msaa)\n        {\n            const viewFramebuffer = gl.createFramebuffer();\n\n            glRenderTarget.framebuffer = viewFramebuffer;\n\n            gl.bindFramebuffer(gl.FRAMEBUFFER, viewFramebuffer);\n\n            renderTarget.colorTextures.forEach((_, i) =>\n            {\n                const msaaRenderBuffer = gl.createRenderbuffer();\n\n                glRenderTarget.msaaRenderBuffer[i] = msaaRenderBuffer;\n            });\n        }\n        else\n        {\n            glRenderTarget.framebuffer = resolveTargetFramebuffer;\n        }\n\n        this._resizeColor(renderTarget, glRenderTarget);\n    }\n\n    private _resizeColor(renderTarget: RenderTarget, glRenderTarget: GlRenderTarget)\n    {\n        const source = renderTarget.colorTexture.source;\n\n        glRenderTarget.width = source.pixelWidth;\n        glRenderTarget.height = source.pixelHeight;\n\n        renderTarget.colorTextures.forEach((colorTexture, i) =>\n        {\n            // nno need to resize the first texture..\n            if (i === 0) return;\n\n            colorTexture.source.resize(source.width, source.height, source._resolution);\n        });\n\n        if (glRenderTarget.msaa)\n        {\n            const renderer = this._renderer;\n            const gl = renderer.gl;\n\n            const viewFramebuffer = glRenderTarget.framebuffer;\n\n            gl.bindFramebuffer(gl.FRAMEBUFFER, viewFramebuffer);\n\n            renderTarget.colorTextures.forEach((colorTexture, i) =>\n            {\n                const source = colorTexture.source;\n\n                renderer.texture.bindSource(source, 0);\n                const glSource = renderer.texture.getGlSource(source);\n\n                const glInternalFormat = glSource.internalFormat;\n\n                const msaaRenderBuffer = glRenderTarget.msaaRenderBuffer[i];\n\n                gl.bindRenderbuffer(\n                    gl.RENDERBUFFER,\n                    msaaRenderBuffer\n                );\n\n                gl.renderbufferStorageMultisample(\n                    gl.RENDERBUFFER,\n                    4,\n                    glInternalFormat,\n                    source.pixelWidth,\n                    source.pixelHeight\n                );\n\n                gl.framebufferRenderbuffer(\n                    gl.FRAMEBUFFER,\n                    gl.COLOR_ATTACHMENT0 + i,\n                    gl.RENDERBUFFER,\n                    msaaRenderBuffer\n                );\n            });\n        }\n    }\n\n    private _initStencil(glRenderTarget: GlRenderTarget)\n    {\n        // this already exists on the default screen\n        if (glRenderTarget.framebuffer === null) return;\n\n        const gl = this._renderer.gl;\n\n        const depthStencilRenderBuffer = gl.createRenderbuffer();\n\n        glRenderTarget.depthStencilRenderBuffer = depthStencilRenderBuffer;\n\n        gl.bindRenderbuffer(\n            gl.RENDERBUFFER,\n            depthStencilRenderBuffer\n        );\n\n        gl.framebufferRenderbuffer(\n            gl.FRAMEBUFFER,\n            gl.DEPTH_STENCIL_ATTACHMENT,\n            gl.RENDERBUFFER,\n            depthStencilRenderBuffer\n        );\n\n        // TDO DO>>\n        this._resizeStencil(glRenderTarget);\n    }\n\n    private _resizeStencil(glRenderTarget: GlRenderTarget)\n    {\n        const gl = this._renderer.gl;\n\n        gl.bindRenderbuffer(\n            gl.RENDERBUFFER,\n            glRenderTarget.depthStencilRenderBuffer\n        );\n\n        if (glRenderTarget.msaa)\n        {\n            gl.renderbufferStorageMultisample(\n                gl.RENDERBUFFER,\n                4,\n                gl.DEPTH24_STENCIL8,\n                glRenderTarget.width,\n                glRenderTarget.height\n            );\n        }\n        else\n        {\n            gl.renderbufferStorage(\n                gl.RENDERBUFFER,\n                this._renderer.context.webGLVersion === 2\n                    ? gl.DEPTH24_STENCIL8\n                    : gl.DEPTH_STENCIL,\n                glRenderTarget.width,\n                glRenderTarget.height\n            );\n        }\n    }\n}\n","import { ExtensionType } from '../../../../extensions/Extensions';\nimport { RenderTargetSystem } from '../../shared/renderTarget/RenderTargetSystem';\nimport { GlRenderTargetAdaptor } from './GlRenderTargetAdaptor';\n\nimport type { GlRenderTarget } from '../GlRenderTarget';\nimport type { WebGLRenderer } from '../WebGLRenderer';\n\n/**\n * The WebGL adaptor for the render target system. Allows the Render Target System to be used with the WebGl renderer\n * @memberof rendering\n */\nexport class GlRenderTargetSystem extends RenderTargetSystem<GlRenderTarget>\n{\n    /** @ignore */\n    public static extension = {\n        type: [ExtensionType.WebGLSystem],\n        name: 'renderTarget',\n    } as const;\n\n    public adaptor = new GlRenderTargetAdaptor();\n\n    constructor(renderer: WebGLRenderer)\n    {\n        super(renderer);\n\n        this.adaptor.init(renderer, this);\n    }\n}\n","/**\n * @private\n */\nexport class IGLUniformData\n{\n    public location: WebGLUniformLocation;\n    public value: number | boolean | Float32Array | Int32Array | Uint32Array | boolean[];\n}\n\n/**\n * Helper class to create a WebGL Program\n * @private\n */\nexport class GlProgramData\n{\n    /** The shader program. */\n    public program: WebGLProgram;\n\n    /**\n     * Holds the uniform data which contains uniform locations\n     * and current uniform values used for caching and preventing unneeded GPU commands.\n     */\n    public uniformData: Record<string, any>;\n\n    /**\n     * UniformGroups holds the various upload functions for the shader. Each uniform group\n     * and program have a unique upload function generated.\n     */\n    public uniformGroups: Record<string, any>;\n\n    /** A hash that stores where UBOs are bound to on the program. */\n    public uniformBlockBindings: Record<string, any>;\n\n    /** A hash for lazily-generated uniform uploading functions. */\n    public uniformSync: Record<string, any>;\n\n    /**\n     * A place where dirty ticks are stored for groups\n     * If a tick here does not match with the Higher level Programs tick, it means\n     * we should re upload the data.\n     */\n    public uniformDirtyGroups: Record<string, any>;\n\n    /**\n     * Makes a new Pixi program.\n     * @param program - webgl program\n     * @param uniformData - uniforms\n     */\n    constructor(program: WebGLProgram, uniformData: {[key: string]: IGLUniformData})\n    {\n        this.program = program;\n        this.uniformData = uniformData;\n        this.uniformGroups = {};\n        this.uniformDirtyGroups = {};\n        this.uniformBlockBindings = {};\n    }\n\n    /** Destroys this program. */\n    public destroy(): void\n    {\n        this.uniformData = null;\n        this.uniformGroups = null;\n        this.uniformDirtyGroups = null;\n        this.uniformBlockBindings = null;\n        this.program = null;\n    }\n}\n","/**\n * @private\n * @param {WebGLRenderingContext} gl - The current WebGL context {WebGLProgram}\n * @param {number} type - the type, can be either VERTEX_SHADER or FRAGMENT_SHADER\n * @param {string} src - The vertex shader source as an array of strings.\n * @returns {WebGLShader} the shader\n */\nexport function compileShader(gl: WebGLRenderingContextBase, type: number, src: string): WebGLShader\n{\n    const shader = gl.createShader(type);\n\n    gl.shaderSource(shader, src);\n    gl.compileShader(shader);\n\n    return shader;\n}\n","function booleanArray(size: number): Array<boolean>\n{\n    const array = new Array(size);\n\n    for (let i = 0; i < array.length; i++)\n    {\n        array[i] = false;\n    }\n\n    return array;\n}\n\n/**\n * @method defaultValue\n * @param {string} type - Type of value\n * @param {number} size\n * @private\n */\nexport function defaultValue(\n    type: string,\n    size: number\n): number | Float32Array | Int32Array | Uint32Array | boolean | boolean[]\n{\n    switch (type)\n    {\n        case 'float':\n            return 0;\n\n        case 'vec2':\n            return new Float32Array(2 * size);\n\n        case 'vec3':\n            return new Float32Array(3 * size);\n\n        case 'vec4':\n            return new Float32Array(4 * size);\n\n        case 'int':\n        case 'uint':\n        case 'sampler2D':\n        case 'sampler2DArray':\n            return 0;\n\n        case 'ivec2':\n            return new Int32Array(2 * size);\n\n        case 'ivec3':\n            return new Int32Array(3 * size);\n\n        case 'ivec4':\n            return new Int32Array(4 * size);\n\n        case 'uvec2':\n            return new Uint32Array(2 * size);\n\n        case 'uvec3':\n            return new Uint32Array(3 * size);\n\n        case 'uvec4':\n            return new Uint32Array(4 * size);\n\n        case 'bool':\n            return false;\n\n        case 'bvec2':\n\n            return booleanArray(2 * size);\n\n        case 'bvec3':\n            return booleanArray(3 * size);\n\n        case 'bvec4':\n            return booleanArray(4 * size);\n\n        case 'mat2':\n            return new Float32Array([1, 0,\n                0, 1]);\n\n        case 'mat3':\n            return new Float32Array([1, 0, 0,\n                0, 1, 0,\n                0, 0, 1]);\n\n        case 'mat4':\n            return new Float32Array([1, 0, 0, 0,\n                0, 1, 0, 0,\n                0, 0, 1, 0,\n                0, 0, 0, 1]);\n    }\n\n    return null;\n}\n","import type { Dict } from '../../../../../utils/types';\nimport type { VertexFormat } from '../../../shared/geometry/const';\n\nlet GL_TABLE: Dict<string> = null;\n\nconst GL_TO_GLSL_TYPES: Dict<string> = {\n    FLOAT:       'float',\n    FLOAT_VEC2:  'vec2',\n    FLOAT_VEC3:  'vec3',\n    FLOAT_VEC4:  'vec4',\n\n    INT:         'int',\n    INT_VEC2:    'ivec2',\n    INT_VEC3:    'ivec3',\n    INT_VEC4:    'ivec4',\n\n    UNSIGNED_INT:         'uint',\n    UNSIGNED_INT_VEC2:    'uvec2',\n    UNSIGNED_INT_VEC3:    'uvec3',\n    UNSIGNED_INT_VEC4:    'uvec4',\n\n    BOOL:        'bool',\n    BOOL_VEC2:   'bvec2',\n    BOOL_VEC3:   'bvec3',\n    BOOL_VEC4:   'bvec4',\n\n    FLOAT_MAT2:  'mat2',\n    FLOAT_MAT3:  'mat3',\n    FLOAT_MAT4:  'mat4',\n\n    SAMPLER_2D:              'sampler2D',\n    INT_SAMPLER_2D:          'sampler2D',\n    UNSIGNED_INT_SAMPLER_2D: 'sampler2D',\n    SAMPLER_CUBE:              'samplerCube',\n    INT_SAMPLER_CUBE:          'samplerCube',\n    UNSIGNED_INT_SAMPLER_CUBE: 'samplerCube',\n    SAMPLER_2D_ARRAY:              'sampler2DArray',\n    INT_SAMPLER_2D_ARRAY:          'sampler2DArray',\n    UNSIGNED_INT_SAMPLER_2D_ARRAY: 'sampler2DArray',\n};\n\nconst GLSL_TO_VERTEX_TYPES: Record<string, VertexFormat> = {\n\n    float: 'float32',\n    vec2: 'float32x2',\n    vec3: 'float32x3',\n    vec4: 'float32x4',\n\n    int: 'sint32',\n    ivec2: 'sint32x2',\n    ivec3: 'sint32x3',\n    ivec4: 'sint32x4',\n\n    uint: 'uint32',\n    uvec2: 'uint32x2',\n    uvec3: 'uint32x3',\n    uvec4: 'uint32x4',\n\n    bool: 'uint32',\n    bvec2: 'uint32x2',\n    bvec3: 'uint32x3',\n    bvec4: 'uint32x4',\n};\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n\nexport function mapType(gl: any, type: number): string\n{\n    if (!GL_TABLE)\n    {\n        const typeNames = Object.keys(GL_TO_GLSL_TYPES);\n\n        GL_TABLE = {};\n\n        for (let i = 0; i < typeNames.length; ++i)\n        {\n            const tn = typeNames[i];\n\n            GL_TABLE[gl[tn]] = GL_TO_GLSL_TYPES[tn];\n        }\n    }\n\n    return GL_TABLE[type];\n}\n\nexport function mapGlToVertexFormat(gl: any, type: number): VertexFormat\n{\n    const typeValue = mapType(gl, type);\n\n    return GLSL_TO_VERTEX_TYPES[typeValue] || 'float32';\n}\n","/**\n * will log a shader error highlighting the lines with the error\n * also will add numbers along the side.\n * @param gl - the WebGLContext\n * @param shader - the shader to log errors for\n */\nfunction logPrettyShaderError(gl: WebGLRenderingContext, shader: WebGLShader): void\n{\n    const shaderSrc = gl.getShaderSource(shader)\n        .split('\\n')\n        .map((line, index) => `${index}: ${line}`);\n\n    const shaderLog = gl.getShaderInfoLog(shader);\n    const splitShader = shaderLog.split('\\n');\n\n    const dedupe: Record<number, boolean> = {};\n\n    const lineNumbers = splitShader.map((line) => parseFloat(line.replace(/^ERROR\\: 0\\:([\\d]+)\\:.*$/, '$1')))\n        .filter((n) =>\n        {\n            if (n && !dedupe[n])\n            {\n                dedupe[n] = true;\n\n                return true;\n            }\n\n            return false;\n        });\n\n    const logArgs = [''];\n\n    lineNumbers.forEach((number) =>\n    {\n        shaderSrc[number - 1] = `%c${shaderSrc[number - 1]}%c`;\n        logArgs.push('background: #FF0000; color:#FFFFFF; font-size: 10px', 'font-size: 10px');\n    });\n\n    const fragmentSourceToLog = shaderSrc\n        .join('\\n');\n\n    logArgs[0] = fragmentSourceToLog;\n\n    console.error(shaderLog);\n\n    // eslint-disable-next-line no-console\n    console.groupCollapsed('click to view full shader code');\n    console.warn(...logArgs);\n    // eslint-disable-next-line no-console\n    console.groupEnd();\n}\n\n/**\n *\n * logs out any program errors\n * @param gl - The current WebGL context\n * @param program - the WebGL program to display errors for\n * @param vertexShader  - the fragment WebGL shader program\n * @param fragmentShader - the vertex WebGL shader program\n * @private\n */\nexport function logProgramError(\n    gl: WebGLRenderingContext,\n    program: WebGLProgram,\n    vertexShader: WebGLShader,\n    fragmentShader: WebGLShader\n): void\n{\n    // if linking fails, then log and cleanup\n    if (!gl.getProgramParameter(program, gl.LINK_STATUS))\n    {\n        if (!gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS))\n        {\n            logPrettyShaderError(gl, vertexShader);\n        }\n\n        if (!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS))\n        {\n            logPrettyShaderError(gl, fragmentShader);\n        }\n\n        console.error('PixiJS Error: Could not initialize shader.');\n\n        // if there is a program info log, log it\n        if (gl.getProgramInfoLog(program) !== '')\n        {\n            console.warn('PixiJS Warning: gl.getProgramInfoLog()', gl.getProgramInfoLog(program));\n        }\n    }\n}\n","import { warn } from '../../../../../utils/logging/warn';\nimport { GlProgramData } from '../GlProgramData';\nimport { compileShader } from './compileShader';\nimport { defaultValue } from './defaultValue';\nimport { extractAttributesFromGlProgram } from './extractAttributesFromGlProgram';\nimport { getUboData } from './getUboData';\nimport { getUniformData } from './getUniformData';\nimport { logProgramError } from './logProgramError';\n\nimport type { GlRenderingContext } from '../../context/GlRenderingContext';\nimport type { GlProgram } from '../GlProgram';\nimport type { IGLUniformData } from '../GlProgramData';\n\n/**\n * generates a WebGL Program object from a high level Pixi Program.\n * @param gl - a rendering context on which to generate the program\n * @param program - the high level Pixi Program.\n * @private\n */\nexport function generateProgram(gl: GlRenderingContext, program: GlProgram): GlProgramData\n{\n    const glVertShader = compileShader(gl, gl.VERTEX_SHADER, program.vertex);\n    const glFragShader = compileShader(gl, gl.FRAGMENT_SHADER, program.fragment);\n\n    const webGLProgram = gl.createProgram();\n\n    gl.attachShader(webGLProgram, glVertShader);\n    gl.attachShader(webGLProgram, glFragShader);\n\n    const transformFeedbackVaryings = program.transformFeedbackVaryings;\n\n    if (transformFeedbackVaryings)\n    {\n        if (typeof gl.transformFeedbackVaryings !== 'function')\n        {\n            // #if _DEBUG\n            warn(`TransformFeedback is not supported but TransformFeedbackVaryings are given.`);\n            // #endif\n        }\n        else\n        {\n            gl.transformFeedbackVaryings(\n                webGLProgram,\n                transformFeedbackVaryings.names,\n                transformFeedbackVaryings.bufferMode === 'separate'\n                    ? gl.SEPARATE_ATTRIBS\n                    : gl.INTERLEAVED_ATTRIBS\n            );\n        }\n    }\n\n    gl.linkProgram(webGLProgram);\n\n    if (!gl.getProgramParameter(webGLProgram, gl.LINK_STATUS))\n    {\n        logProgramError(gl, webGLProgram, glVertShader, glFragShader);\n    }\n\n    // GLSL 1.00: bind attributes sorted by name in ascending order\n    // GLSL 3.00: don't change the attribute locations that where chosen by the compiler\n    //            or assigned by the layout specifier in the shader source code\n    program._attributeData = extractAttributesFromGlProgram(\n        webGLProgram,\n        gl,\n        !(/^[ \\t]*#[ \\t]*version[ \\t]+300[ \\t]+es[ \\t]*$/m).test(program.vertex)\n    );\n\n    program._uniformData = getUniformData(webGLProgram, gl);\n    program._uniformBlockData = getUboData(webGLProgram, gl);\n\n    gl.deleteShader(glVertShader);\n    gl.deleteShader(glFragShader);\n\n    const uniformData: {[key: string]: IGLUniformData} = {};\n\n    for (const i in program._uniformData)\n    {\n        const data = program._uniformData[i];\n\n        uniformData[i] = {\n            location: gl.getUniformLocation(webGLProgram, i),\n            value: defaultValue(data.type, data.size),\n        };\n    }\n\n    const glProgram = new GlProgramData(webGLProgram, uniformData);\n\n    return glProgram;\n}\n","import { getAttributeInfoFromFormat } from '../../../shared/geometry/utils/getAttributeInfoFromFormat';\nimport { mapGlToVertexFormat } from './mapType';\n\nimport type { Attribute } from '../../../shared/geometry/Geometry';\n\nexport type ExtractedAttributeData = Omit<Attribute, 'buffer'>;\n\n/**\n * returns the attribute data from the program\n * @private\n * @param {WebGLProgram} [program] - the WebGL program\n * @param {WebGLRenderingContext} [gl] - the WebGL context\n * @returns {object} the attribute data for this program\n */\n\nexport function extractAttributesFromGlProgram(\n    program: WebGLProgram,\n    gl: WebGLRenderingContextBase,\n    sortAttributes = false\n): Record<string, ExtractedAttributeData>\n{\n    const attributes: {[key: string]: ExtractedAttributeData} = {};\n\n    const totalAttributes = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES);\n\n    for (let i = 0; i < totalAttributes; i++)\n    {\n        const attribData = gl.getActiveAttrib(program, i);\n\n        // ignore the default ones!\n        if (attribData.name.startsWith('gl_'))\n        {\n            continue;\n        }\n\n        const format = mapGlToVertexFormat(gl, attribData.type);\n\n        attributes[attribData.name] = {\n            location: 0, // set further down..\n            format,\n            stride: getAttributeInfoFromFormat(format).stride,\n            offset: 0,\n            instance: false,\n            start: 0,\n        };\n    }\n\n    const keys = Object.keys(attributes);\n\n    if (sortAttributes)\n    {\n        keys.sort((a, b) => (a > b) ? 1 : -1); // eslint-disable-line no-confusing-arrow\n\n        for (let i = 0; i < keys.length; i++)\n        {\n            attributes[keys[i]].location = i;\n\n            gl.bindAttribLocation(program, i, keys[i]);\n        }\n\n        gl.linkProgram(program);\n    }\n    else\n    {\n        for (let i = 0; i < keys.length; i++)\n        {\n            attributes[keys[i]].location = gl.getAttribLocation(program, keys[i]);\n        }\n    }\n\n    return attributes;\n}\n","import { defaultValue } from './defaultValue';\nimport { mapType } from './mapType';\n\nimport type { GlUniformData } from '../GlProgram';\n\n/**\n * returns the uniform data from the program\n * @private\n * @param program - the webgl program\n * @param gl - the WebGL context\n * @returns {object} the uniform data for this program\n */\nexport function getUniformData(program: WebGLProgram, gl: WebGLRenderingContextBase): {[key: string]: GlUniformData}\n{\n    const uniforms: {[key: string]: GlUniformData} = {};\n\n    const totalUniforms = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);\n\n    for (let i = 0; i < totalUniforms; i++)\n    {\n        const uniformData = gl.getActiveUniform(program, i);\n        const name = uniformData.name.replace(/\\[.*?\\]$/, '');\n\n        const isArray = !!(uniformData.name.match(/\\[.*?\\]$/));\n\n        const type = mapType(gl, uniformData.type);\n\n        uniforms[name] = {\n            name,\n            index: i,\n            type,\n            size: uniformData.size,\n            isArray,\n            value: defaultValue(type, uniformData.size),\n        };\n    }\n\n    return uniforms;\n}\n","import type { GlUniformBlockData } from '../GlProgram';\n\n/**\n * returns the uniform block data from the program\n * @private\n * @param program - the webgl program\n * @param gl - the WebGL context\n * @returns {object} the uniform data for this program\n */\nexport function getUboData(program: WebGLProgram, gl: WebGL2RenderingContext): Record<string, GlUniformBlockData>\n{\n    // if uniform buffer data is not supported, early out\n    if (!gl.ACTIVE_UNIFORM_BLOCKS) return {};\n\n    const uniformBlocks: Record<string, GlUniformBlockData> = {};\n\n    // const totalUniforms = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);\n\n    const totalUniformsBlocks = gl.getProgramParameter(program, gl.ACTIVE_UNIFORM_BLOCKS);\n\n    for (let i = 0; i < totalUniformsBlocks; i++)\n    {\n        const name = gl.getActiveUniformBlockName(program, i);\n        const uniformBlockIndex = gl.getUniformBlockIndex(program, name);\n\n        const size = gl.getActiveUniformBlockParameter(program, i, gl.UNIFORM_BLOCK_DATA_SIZE);\n\n        uniformBlocks[name] = {\n            name,\n            index: uniformBlockIndex,\n            size,\n        };\n    }\n\n    return uniformBlocks;\n}\n","import { ExtensionType } from '../../../../extensions/Extensions';\nimport { generateShaderSyncCode } from './GenerateShaderSyncCode';\nimport { generateProgram } from './program/generateProgram';\n\nimport type { BufferResource } from '../../shared/buffer/BufferResource';\nimport type { Shader } from '../../shared/shader/Shader';\nimport type { UniformGroup } from '../../shared/shader/UniformGroup';\nimport type { GlRenderingContext } from '../context/GlRenderingContext';\nimport type { WebGLRenderer } from '../WebGLRenderer';\nimport type { GlProgram } from './GlProgram';\nimport type { GlProgramData } from './GlProgramData';\n\nexport interface ShaderSyncData\n{\n    textureCount: number;\n    blockIndex: number;\n}\n\nexport type ShaderSyncFunction = (renderer: WebGLRenderer, shader: Shader, syncData: ShaderSyncData) => void;\n\n// default sync data so we don't create a new one each time!\nconst defaultSyncData: ShaderSyncData = {\n    textureCount: 0,\n    blockIndex: 0,\n};\n\n/**\n * System plugin to the renderer to manage the shaders for WebGL.\n * @memberof rendering\n */\nexport class GlShaderSystem\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n        ],\n        name: 'shader',\n    } as const;\n\n    /**\n     * @internal\n     * @private\n     */\n    public _activeProgram: GlProgram = null;\n\n    private _programDataHash: Record<string, GlProgramData> = Object.create(null);\n    private readonly _renderer: WebGLRenderer;\n    public _gl: WebGL2RenderingContext;\n    private _maxBindings: number;\n    private _nextIndex = 0;\n    private _boundUniformsIdsToIndexHash: Record<number, number> = Object.create(null);\n    private _boundIndexToUniformsHash: Record<number, UniformGroup | BufferResource> = Object.create(null);\n    private _shaderSyncFunctions: Record<string, ShaderSyncFunction> = Object.create(null);\n\n    constructor(renderer: WebGLRenderer)\n    {\n        this._renderer = renderer;\n    }\n\n    protected contextChange(gl: GlRenderingContext): void\n    {\n        this._gl = gl;\n\n        this._maxBindings = gl.MAX_UNIFORM_BUFFER_BINDINGS ? gl.getParameter(gl.MAX_UNIFORM_BUFFER_BINDINGS) : 0;\n\n        this._programDataHash = Object.create(null);\n        this._boundUniformsIdsToIndexHash = Object.create(null);\n        this._boundIndexToUniformsHash = Object.create(null);\n        this._activeProgram = null;\n    }\n\n    /**\n     * Changes the current shader to the one given in parameter.\n     * @param shader - the new shader\n     * @param skipSync - false if the shader should automatically sync its uniforms.\n     * @returns the glProgram that belongs to the shader.\n     */\n    public bind(shader: Shader, skipSync?: boolean): void\n    {\n        this._setProgram(shader.glProgram);\n\n        if (skipSync) return;\n\n        defaultSyncData.textureCount = 0;\n        defaultSyncData.blockIndex = 0;\n\n        let syncFunction = this._shaderSyncFunctions[shader.glProgram._key];\n\n        if (!syncFunction)\n        {\n            syncFunction = this._shaderSyncFunctions[shader.glProgram._key] = this._generateShaderSync(shader, this);\n        }\n\n        syncFunction(this._renderer, shader, defaultSyncData);\n    }\n\n    /**\n     * Updates the uniform group.\n     * @param uniformGroup - the uniform group to update\n     */\n    public updateUniformGroup(uniformGroup: UniformGroup): void\n    {\n        this._renderer.uniformGroup.updateUniformGroup(uniformGroup, this._activeProgram, defaultSyncData);\n    }\n\n    /**\n     * Binds a uniform block to the shader.\n     * @param uniformGroup - the uniform group to bind\n     * @param name - the name of the uniform block\n     * @param index - the index of the uniform block\n     */\n    public bindUniformBlock(uniformGroup: UniformGroup | BufferResource, name: string, index = 0): void\n    {\n        const bufferSystem = this._renderer.buffer;\n        const programData = this._getProgramData(this._activeProgram);\n\n        const isBufferResource = (uniformGroup as BufferResource)._bufferResource;\n\n        if (isBufferResource)\n        {\n            this._renderer.ubo.updateUniformGroup(uniformGroup as UniformGroup);\n        }\n\n        bufferSystem.updateBuffer(uniformGroup.buffer);\n\n        let boundIndex = this._boundUniformsIdsToIndexHash[uniformGroup.uid];\n\n        // check if it is already bound..\n        if (boundIndex === undefined)\n        {\n            const nextIndex = this._nextIndex++ % this._maxBindings;\n\n            const currentBoundUniformGroup = this._boundIndexToUniformsHash[nextIndex];\n\n            if (currentBoundUniformGroup)\n            {\n                this._boundUniformsIdsToIndexHash[currentBoundUniformGroup.uid] = undefined;\n            }\n\n            // find a free slot..\n            boundIndex = this._boundUniformsIdsToIndexHash[uniformGroup.uid] = nextIndex;\n            this._boundIndexToUniformsHash[nextIndex] = uniformGroup;\n\n            if (isBufferResource)\n            {\n                bufferSystem.bindBufferRange(uniformGroup.buffer, nextIndex, (uniformGroup as BufferResource).offset);\n            }\n            else\n            {\n                bufferSystem.bindBufferBase(uniformGroup.buffer, nextIndex);\n            }\n        }\n\n        const gl = this._gl;\n\n        const uniformBlockIndex = this._activeProgram._uniformBlockData[name].index;\n\n        if (programData.uniformBlockBindings[index] === boundIndex) return;\n        programData.uniformBlockBindings[index] = boundIndex;\n\n        gl.uniformBlockBinding(programData.program, uniformBlockIndex, boundIndex);\n    }\n\n    private _setProgram(program: GlProgram)\n    {\n        if (this._activeProgram === program) return;\n\n        this._activeProgram = program;\n\n        const programData = this._getProgramData(program);\n\n        this._gl.useProgram(programData.program);\n    }\n\n    /**\n     * @param program - the program to get the data for\n     * @internal\n     * @private\n     */\n    public _getProgramData(program: GlProgram): GlProgramData\n    {\n        return this._programDataHash[program._key] || this._createProgramData(program);\n    }\n\n    private _createProgramData(program: GlProgram): GlProgramData\n    {\n        const key = program._key;\n\n        this._programDataHash[key] = generateProgram(this._gl, program);\n\n        return this._programDataHash[key];\n    }\n\n    public destroy(): void\n    {\n        for (const key of Object.keys(this._programDataHash))\n        {\n            const programData = this._programDataHash[key];\n\n            programData.destroy();\n            this._programDataHash[key] = null;\n        }\n\n        this._programDataHash = null;\n        this._boundUniformsIdsToIndexHash = null;\n    }\n\n    /**\n     * Creates a function that can be executed that will sync the shader as efficiently as possible.\n     * Overridden by the unsafe eval package if you don't want eval used in your project.\n     * @param shader - the shader to generate the sync function for\n     * @param shaderSystem - the shader system to use\n     * @returns - the generated sync function\n     * @ignore\n     */\n    public _generateShaderSync(shader: Shader, shaderSystem: GlShaderSystem): ShaderSyncFunction\n    {\n        return generateShaderSyncCode(shader, shaderSystem);\n    }\n}\n","import { BufferResource } from '../../shared/buffer/BufferResource';\nimport { UniformGroup } from '../../shared/shader/UniformGroup';\nimport { TextureSource } from '../../shared/texture/sources/TextureSource';\n\nimport type { Shader } from '../../shared/shader/Shader';\nimport type { GlShaderSystem, ShaderSyncFunction } from './GlShaderSystem';\n\n/**\n * Generates the a function that will efficiantly sync shader resources with the GPU.\n * @param shader - The shader to generate the code for\n * @param shaderSystem - An instance of the shader system\n */\nexport function generateShaderSyncCode(shader: Shader, shaderSystem: GlShaderSystem): ShaderSyncFunction\n{\n    const funcFragments: string[] = [];\n\n    /**\n     * rS = renderer.shader\n     * sS = shaderSystem\n     * sD = shaderData\n     * g = shader.groups\n     * s = shader\n     * r = renderer\n     * ugS = renderer.uniformGroupSystem\n     */\n    const headerFragments: string[] = [`\n        var g = s.groups;\n        var sS = r.shader;\n        var p = s.glProgram;\n        var ugS = r.uniformGroup;\n        var resources;\n    `];\n\n    let addedTextreSystem = false;\n    let blockIndex = 0;\n    let textureCount = 0;\n\n    const programData = shaderSystem._getProgramData(shader.glProgram);\n\n    for (const i in shader.groups)\n    {\n        const group = shader.groups[i];\n\n        funcFragments.push(`\n            resources = g[${i}].resources;\n        `);\n\n        for (const j in group.resources)\n        {\n            const resource = group.resources[j];\n\n            if (resource instanceof UniformGroup)\n            {\n                if (resource.ubo)\n                {\n                    funcFragments.push(`\n                        sS.bindUniformBlock(\n                            resources[${j}],\n                            sS._uniformBindMap[${i}[${j}],\n                            ${blockIndex++}\n                        );\n                    `);\n                }\n                else\n                {\n                    funcFragments.push(`\n                        ugS.updateUniformGroup(resources[${j}], p, sD);\n                    `);\n                }\n            }\n            else if (resource instanceof BufferResource)\n            {\n                funcFragments.push(`\n                    sS.bindUniformBlock(\n                        resources[${j}],\n                        sS._uniformBindMap[${i}[${j}],\n                        ${blockIndex++}\n                    );\n                `);\n            }\n            else if (resource instanceof TextureSource)\n            {\n                const uniformName = shader._uniformBindMap[i as unknown as number][j as unknown as number];\n\n                const uniformData = programData.uniformData[uniformName];\n\n                if (uniformData)\n                {\n                    if (!addedTextreSystem)\n                    {\n                        addedTextreSystem = true;\n                        headerFragments.push(`\n                        var tS = r.texture;\n                        `);\n                    }\n\n                    shaderSystem._gl.uniform1i(uniformData.location, textureCount);\n\n                    funcFragments.push(`\n                        tS.bind(resources[${j}], ${textureCount});\n                    `);\n\n                    textureCount++;\n                }\n            }\n        }\n    }\n\n    const functionSource = [...headerFragments, ...funcFragments].join('\\n');\n\n    // eslint-disable-next-line no-new-func\n    return new Function('r', 's', 'sD', functionSource) as ShaderSyncFunction;\n}\n","// cu = Cached value's uniform data field\n// cv = Cached value\n// v = value to upload\n// ud = uniformData\n// uv = uniformValue\n\nimport type { UNIFORM_TYPES } from '../../../shared/shader/types';\n\nexport type ArraySetterFunction = (v: any, location: WebGLUniformLocation, gl: any) => void;\n\nexport const UNIFORM_TO_SINGLE_SETTERS: Record<UNIFORM_TYPES | string, string> = {\n    f32: `if (cv !== v) {\n            cu.value = v;\n            gl.uniform1f(location, v);\n        }`,\n    'vec2<f32>': `if (cv[0] !== v[0] || cv[1] !== v[1]) {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            gl.uniform2f(location, v[0], v[1]);\n        }`,\n    'vec3<f32>': `if (cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2]) {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            cv[2] = v[2];\n            gl.uniform3f(location, v[0], v[1], v[2]);\n        }`,\n    'vec4<f32>': `if (cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2] || cv[3] !== v[3]) {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            cv[2] = v[2];\n            cv[3] = v[3];\n            gl.uniform4f(location, v[0], v[1], v[2], v[3]);\n        }`,\n    i32: `if (cv !== v) {\n            cu.value = v;\n            gl.uniform1i(location, v);\n        }`,\n    'vec2<i32>': `if (cv[0] !== v[0] || cv[1] !== v[1]) {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            gl.uniform2i(location, v[0], v[1]);\n        }`,\n    'vec3<i32>': `if (cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2]) {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            cv[2] = v[2];\n            gl.uniform3i(location, v[0], v[1], v[2]);\n        }`,\n    'vec4<i32>': `if (cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2] || cv[3] !== v[3]) {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            cv[2] = v[2];\n            cv[3] = v[3];\n            gl.uniform4i(location, v[0], v[1], v[2], v[3]);\n        }`,\n    u32: `if (cv !== v) {\n            cu.value = v;\n            gl.uniform1ui(location, v);\n        }`,\n    'vec2<u32>': `if (cv[0] !== v[0] || cv[1] !== v[1]) {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            gl.uniform2ui(location, v[0], v[1]);\n        }`,\n    'vec3<u32>': `if (cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2]) {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            cv[2] = v[2];\n            gl.uniform3ui(location, v[0], v[1], v[2]);\n        }`,\n    'vec4<u32>': `if (cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2] || cv[3] !== v[3]) {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            cv[2] = v[2];\n            cv[3] = v[3];\n            gl.uniform4ui(location, v[0], v[1], v[2], v[3]);\n        }`,\n    bool: `if (cv !== v) {\n            cu.value = v;\n            gl.uniform1i(location, v);\n        }`,\n    'vec2<bool>': `if (cv[0] !== v[0] || cv[1] !== v[1]) {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            gl.uniform2i(location, v[0], v[1]);\n        }`,\n    'vec3<bool>': `if (cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2]) {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            cv[2] = v[2];\n            gl.uniform3i(location, v[0], v[1], v[2]);\n        }`,\n    'vec4<bool>': `if (cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2] || cv[3] !== v[3]) {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            cv[2] = v[2];\n            cv[3] = v[3];\n            gl.uniform4i(location, v[0], v[1], v[2], v[3]);\n        }`,\n    'mat2x2<f32>': `gl.uniformMatrix2fv(location, false, v);`,\n    'mat3x3<f32>': `gl.uniformMatrix3fv(location, false, v);`,\n    'mat4x4<f32>': `gl.uniformMatrix4fv(location, false, v);`,\n};\n\nexport const UNIFORM_TO_ARRAY_SETTERS: Record<UNIFORM_TYPES | string, string> = {\n    f32: `gl.uniform1fv(location, v);`,\n    'vec2<f32>': `gl.uniform2fv(location, v);`,\n    'vec3<f32>': `gl.uniform3fv(location, v);`,\n    'vec4<f32>': `gl.uniform4fv(location, v);`,\n    'mat2x2<f32>': `gl.uniformMatrix2fv(location, false, v);`,\n    'mat3x3<f32>': `gl.uniformMatrix3fv(location, false, v);`,\n    'mat4x4<f32>': `gl.uniformMatrix4fv(location, false, v);`,\n    i32: `gl.uniform1iv(location, v);`,\n    'vec2<i32>': `gl.uniform2iv(location, v);`,\n    'vec3<i32>': `gl.uniform3iv(location, v);`,\n    'vec4<i32>': `gl.uniform4iv(location, v);`,\n    u32: `gl.uniform1iv(location, v);`,\n    'vec2<u32>': `gl.uniform2iv(location, v);`,\n    'vec3<u32>': `gl.uniform3iv(location, v);`,\n    'vec4<u32>': `gl.uniform4iv(location, v);`,\n    bool: `gl.uniform1iv(location, v);`,\n    'vec2<bool>': `gl.uniform2iv(location, v);`,\n    'vec3<bool>': `gl.uniform3iv(location, v);`,\n    'vec4<bool>': `gl.uniform4iv(location, v);`,\n};\n","import { ExtensionType } from '../../../../extensions/Extensions';\nimport { generateUniformsSync } from './utils/generateUniformsSync';\n\nimport type { UniformsSyncCallback } from '../../shared/shader/types';\nimport type { UniformGroup } from '../../shared/shader/UniformGroup';\nimport type { System } from '../../shared/system/System';\nimport type { GlRenderingContext } from '../context/GlRenderingContext';\nimport type { WebGLRenderer } from '../WebGLRenderer';\nimport type { GlProgram, GlUniformData } from './GlProgram';\n\n/**\n * System plugin to the renderer to manage shaders.\n * @memberof rendering\n */\nexport class GlUniformGroupSystem implements System\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n        ],\n        name: 'uniformGroup',\n    } as const;\n\n    /**\n     * The current WebGL rendering context.\n     * @member {WebGLRenderingContext}\n     */\n    protected gl: GlRenderingContext;\n\n    /** Cache to holds the generated functions. Stored against UniformObjects unique signature. */\n    private _cache: Record<string, UniformsSyncCallback> = {};\n    private _renderer: WebGLRenderer;\n\n    private _uniformGroupSyncHash: Record<string, Record<string, UniformsSyncCallback>> = {};\n\n    /** @param renderer - The renderer this System works for. */\n    constructor(renderer: WebGLRenderer)\n    {\n        this._renderer = renderer;\n\n        this.gl = null;\n        this._cache = {};\n    }\n\n    protected contextChange(gl: GlRenderingContext): void\n    {\n        this.gl = gl;\n    }\n\n    /**\n     * Uploads the uniforms values to the currently bound shader.\n     * @param group - the uniforms values that be applied to the current shader\n     * @param program\n     * @param syncData\n     * @param syncData.textureCount\n     */\n    public updateUniformGroup(group: UniformGroup, program: GlProgram, syncData: { textureCount: number }): void\n    {\n        const programData = this._renderer.shader._getProgramData(program);\n\n        if (!group.isStatic || group._dirtyId !== programData.uniformDirtyGroups[group.uid])\n        {\n            programData.uniformDirtyGroups[group.uid] = group._dirtyId;\n\n            const syncFunc = this._getUniformSyncFunction(group, program);\n\n            syncFunc(programData.uniformData, group.uniforms, this._renderer, syncData);\n        }\n    }\n\n    /**\n     * Overrideable by the pixi.js/unsafe-eval package to use static syncUniforms instead.\n     * @param group\n     * @param program\n     */\n    private _getUniformSyncFunction(group: UniformGroup, program: GlProgram): UniformsSyncCallback\n    {\n        return this._uniformGroupSyncHash[group._signature]?.[program._key]\n            || this._createUniformSyncFunction(group, program);\n    }\n\n    private _createUniformSyncFunction(group: UniformGroup, program: GlProgram): UniformsSyncCallback\n    {\n        const uniformGroupSyncHash = this._uniformGroupSyncHash[group._signature]\n            || (this._uniformGroupSyncHash[group._signature] = {});\n\n        const id = this._getSignature(group, program._uniformData, 'u');\n\n        if (!this._cache[id])\n        {\n            this._cache[id] = this._generateUniformsSync(group, program._uniformData);\n        }\n\n        uniformGroupSyncHash[program._key] = this._cache[id];\n\n        return uniformGroupSyncHash[program._key];\n    }\n\n    private _generateUniformsSync(group: UniformGroup, uniformData: Record<string, GlUniformData>): UniformsSyncCallback\n    {\n        return generateUniformsSync(group, uniformData);\n    }\n\n    /**\n     * Takes a uniform group and data and generates a unique signature for them.\n     * @param group - The uniform group to get signature of\n     * @param group.uniforms\n     * @param uniformData - Uniform information generated by the shader\n     * @param preFix\n     * @returns Unique signature of the uniform group\n     */\n    private _getSignature(group: UniformGroup, uniformData: Record<string, any>, preFix: string): string\n    {\n        const uniforms = group.uniforms;\n\n        const strings = [`${preFix}-`];\n\n        for (const i in uniforms)\n        {\n            strings.push(i);\n\n            if (uniformData[i])\n            {\n                strings.push(uniformData[i].type);\n            }\n        }\n\n        return strings.join('-');\n    }\n\n    /** Destroys this System and removes all its textures. */\n    public destroy(): void\n    {\n        this._renderer = null;\n        this._cache = null;\n    }\n}\n","// cu = Cached value's uniform data field\n// cv = Cached value\n// v = value to upload\n// ud = uniformData\n// uv = uniformValue\n\nimport { BufferResource } from '../../../shared/buffer/BufferResource';\nimport { UniformGroup } from '../../../shared/shader/UniformGroup';\nimport { uniformParsers } from '../../../shared/shader/utils/uniformParsers';\nimport { UNIFORM_TO_ARRAY_SETTERS, UNIFORM_TO_SINGLE_SETTERS } from './generateUniformsSyncTypes';\n\nimport type { UniformsSyncCallback } from '../../../shared/shader/types';\n\nexport function generateUniformsSync(group: UniformGroup, uniformData: Record<string, any>): UniformsSyncCallback\n{\n    const funcFragments = [`\n        var v = null;\n        var cv = null;\n        var cu = null;\n        var t = 0;\n        var gl = renderer.gl;\n        var name = null;\n    `];\n\n    for (const i in group.uniforms)\n    {\n        if (!uniformData[i])\n        {\n            if (group.uniforms[i] instanceof UniformGroup)\n            {\n                if ((group.uniforms[i] as UniformGroup).ubo)\n                {\n                    funcFragments.push(`\n                        renderer.shader.bindUniformBlock(uv.${i}, \"${i}\");\n                    `);\n                }\n                else\n                {\n                    funcFragments.push(`\n                        renderer.shader.updateUniformGroup(uv.${i});\n                    `);\n                }\n            }\n            else if (group.uniforms[i] instanceof BufferResource)\n            {\n                funcFragments.push(`\n                        renderer.shader.bindBufferResource(uv.${i}, \"${i}\");\n                    `);\n            }\n\n            continue;\n        }\n\n        const uniform = group.uniformStructures[i];\n\n        let parsed = false;\n\n        for (let j = 0; j < uniformParsers.length; j++)\n        {\n            const parser = uniformParsers[j];\n\n            if (uniform.type === parser.type && parser.test(uniform))\n            {\n                funcFragments.push(`name = \"${i}\";`, uniformParsers[j].uniform);\n                parsed = true;\n\n                break;\n            }\n        }\n\n        if (!parsed)\n        {\n            const templateType = uniform.size === 1 ? UNIFORM_TO_SINGLE_SETTERS : UNIFORM_TO_ARRAY_SETTERS;\n\n            const template = templateType[uniform.type].replace('location', `ud[\"${i}\"].location`);\n\n            funcFragments.push(`\n            cu = ud[\"${i}\"];\n            cv = cu.value;\n            v = uv[\"${i}\"];\n            ${template};`);\n        }\n    }\n\n    /*\n     * the introduction of syncData is to solve an issue where textures in uniform groups are not set correctly\n     * the texture count was always starting from 0 in each group. This needs to increment each time a texture is used\n     * no matter which group is being used\n     *\n     */\n    // eslint-disable-next-line no-new-func\n    return new Function('ud', 'uv', 'renderer', 'syncData', funcFragments.join('\\n')) as UniformsSyncCallback;\n}\n","import { ExtensionType } from '../../../../extensions/Extensions';\nimport { State } from '../../shared/state/State';\nimport { mapWebGLBlendModesToPixi } from './mapWebGLBlendModesToPixi';\n\nimport type { BLEND_MODES } from '../../shared/state/const';\nimport type { System } from '../../shared/system/System';\nimport type { GlRenderingContext } from '../context/GlRenderingContext';\n\nconst BLEND = 0;\nconst OFFSET = 1;\nconst CULLING = 2;\nconst DEPTH_TEST = 3;\nconst WINDING = 4;\nconst DEPTH_MASK = 5;\n\n/**\n * System plugin to the renderer to manage WebGL state machines\n * @memberof rendering\n */\nexport class GlStateSystem implements System\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n        ],\n        name: 'state',\n    } as const;\n\n    /**\n     * State ID\n     * @readonly\n     */\n    public stateId: number;\n\n    /**\n     * Polygon offset\n     * @readonly\n     */\n    public polygonOffset: number;\n\n    /**\n     * Blend mode\n     * @default 'none'\n     * @readonly\n     */\n    public blendMode: BLEND_MODES;\n\n    /** Whether current blend equation is different */\n    protected _blendEq: boolean;\n\n    /**\n     * GL context\n     * @member {WebGLRenderingContext}\n     * @readonly\n     */\n    protected gl: GlRenderingContext;\n\n    protected blendModesMap: Record<BLEND_MODES, number[]>;\n\n    /**\n     * Collection of calls\n     * @member {Function[]}\n     */\n    protected readonly map: ((value: boolean) => void)[];\n\n    /**\n     * Collection of check calls\n     * @member {Function[]}\n     */\n    protected readonly checks: ((system: this, state: State) => void)[];\n\n    /**\n     * Default WebGL State\n     * @readonly\n     */\n    protected defaultState: State;\n\n    constructor()\n    {\n        this.gl = null;\n\n        this.stateId = 0;\n        this.polygonOffset = 0;\n        this.blendMode = 'none';\n\n        this._blendEq = false;\n\n        // map functions for when we set state..\n        this.map = [];\n        this.map[BLEND] = this.setBlend;\n        this.map[OFFSET] = this.setOffset;\n        this.map[CULLING] = this.setCullFace;\n        this.map[DEPTH_TEST] = this.setDepthTest;\n        this.map[WINDING] = this.setFrontFace;\n        this.map[DEPTH_MASK] = this.setDepthMask;\n\n        this.checks = [];\n\n        this.defaultState = State.for2d();\n    }\n\n    protected contextChange(gl: GlRenderingContext): void\n    {\n        this.gl = gl;\n\n        this.blendModesMap = mapWebGLBlendModesToPixi(gl);\n\n        this.reset();\n    }\n\n    /**\n     * Sets the current state\n     * @param {*} state - The state to set.\n     */\n    public set(state: State): void\n    {\n        state = state || this.defaultState;\n\n        // TODO maybe to an object check? ( this.state === state )?\n        if (this.stateId !== state.data)\n        {\n            let diff = this.stateId ^ state.data;\n            let i = 0;\n\n            // order from least to most common\n            while (diff)\n            {\n                if (diff & 1)\n                {\n                    // state change!\n                    this.map[i].call(this, !!(state.data & (1 << i)));\n                }\n\n                diff = diff >> 1;\n                i++;\n            }\n\n            this.stateId = state.data;\n        }\n\n        // based on the above settings we check for specific modes..\n        // for example if blend is active we check and set the blend modes\n        // or of polygon offset is active we check the poly depth.\n        for (let i = 0; i < this.checks.length; i++)\n        {\n            this.checks[i](this, state);\n        }\n    }\n\n    /**\n     * Sets the state, when previous state is unknown.\n     * @param {*} state - The state to set\n     */\n    public forceState(state: State): void\n    {\n        state = state || this.defaultState;\n        for (let i = 0; i < this.map.length; i++)\n        {\n            this.map[i].call(this, !!(state.data & (1 << i)));\n        }\n        for (let i = 0; i < this.checks.length; i++)\n        {\n            this.checks[i](this, state);\n        }\n\n        this.stateId = state.data;\n    }\n\n    /**\n     * Sets whether to enable or disable blending.\n     * @param value - Turn on or off WebGl blending.\n     */\n    public setBlend(value: boolean): void\n    {\n        this._updateCheck(GlStateSystem._checkBlendMode, value);\n\n        this.gl[value ? 'enable' : 'disable'](this.gl.BLEND);\n    }\n\n    /**\n     * Sets whether to enable or disable polygon offset fill.\n     * @param value - Turn on or off webgl polygon offset testing.\n     */\n    public setOffset(value: boolean): void\n    {\n        this._updateCheck(GlStateSystem._checkPolygonOffset, value);\n\n        this.gl[value ? 'enable' : 'disable'](this.gl.POLYGON_OFFSET_FILL);\n    }\n\n    /**\n     * Sets whether to enable or disable depth test.\n     * @param value - Turn on or off webgl depth testing.\n     */\n    public setDepthTest(value: boolean): void\n    {\n        this.gl[value ? 'enable' : 'disable'](this.gl.DEPTH_TEST);\n    }\n\n    /**\n     * Sets whether to enable or disable depth mask.\n     * @param value - Turn on or off webgl depth mask.\n     */\n    public setDepthMask(value: boolean): void\n    {\n        this.gl.depthMask(value);\n    }\n\n    /**\n     * Sets whether to enable or disable cull face.\n     * @param {boolean} value - Turn on or off webgl cull face.\n     */\n    public setCullFace(value: boolean): void\n    {\n        this.gl[value ? 'enable' : 'disable'](this.gl.CULL_FACE);\n    }\n\n    /**\n     * Sets the gl front face.\n     * @param {boolean} value - true is clockwise and false is counter-clockwise\n     */\n    public setFrontFace(value: boolean): void\n    {\n        this.gl.frontFace(this.gl[value ? 'CW' : 'CCW']);\n    }\n\n    /**\n     * Sets the blend mode.\n     * @param {number} value - The blend mode to set to.\n     */\n    public setBlendMode(value: BLEND_MODES): void\n    {\n        if (!this.blendModesMap[value])\n        {\n            value = 'normal';\n        }\n\n        if (value === this.blendMode)\n        {\n            return;\n        }\n\n        this.blendMode = value;\n\n        const mode = this.blendModesMap[value];\n        const gl = this.gl;\n\n        if (mode.length === 2)\n        {\n            gl.blendFunc(mode[0], mode[1]);\n        }\n        else\n        {\n            gl.blendFuncSeparate(mode[0], mode[1], mode[2], mode[3]);\n        }\n\n        if (mode.length === 6)\n        {\n            this._blendEq = true;\n            gl.blendEquationSeparate(mode[4], mode[5]);\n        }\n        else if (this._blendEq)\n        {\n            this._blendEq = false;\n            gl.blendEquationSeparate(gl.FUNC_ADD, gl.FUNC_ADD);\n        }\n    }\n\n    /**\n     * Sets the polygon offset.\n     * @param {number} value - the polygon offset\n     * @param {number} scale - the polygon offset scale\n     */\n    public setPolygonOffset(value: number, scale: number): void\n    {\n        this.gl.polygonOffset(value, scale);\n    }\n\n    // used\n    /** Resets all the logic and disables the VAOs. */\n    public reset(): void\n    {\n        this.gl.pixelStorei(this.gl.UNPACK_FLIP_Y_WEBGL, false);\n\n        this.forceState(this.defaultState);\n\n        this._blendEq = true;\n        // setting to '' means the blend mode will be set as soon as we set the first blend mode when rendering!\n        this.blendMode = '' as BLEND_MODES;\n        this.setBlendMode('normal');\n    }\n\n    /**\n     * Checks to see which updates should be checked based on which settings have been activated.\n     *\n     * For example, if blend is enabled then we should check the blend modes each time the state is changed\n     * or if polygon fill is activated then we need to check if the polygon offset changes.\n     * The idea is that we only check what we have too.\n     * @param func - the checking function to add or remove\n     * @param value - should the check function be added or removed.\n     */\n    private _updateCheck(func: (system: this, state: State) => void, value: boolean): void\n    {\n        const index = this.checks.indexOf(func);\n\n        if (value && index === -1)\n        {\n            this.checks.push(func);\n        }\n        else if (!value && index !== -1)\n        {\n            this.checks.splice(index, 1);\n        }\n    }\n\n    /**\n     * A private little wrapper function that we call to check the blend mode.\n     * @param system - the System to perform the state check on\n     * @param state - the state that the blendMode will pulled from\n     */\n    private static _checkBlendMode(system: GlStateSystem, state: State): void\n    {\n        system.setBlendMode(state.blendMode);\n    }\n\n    /**\n     * A private little wrapper function that we call to check the polygon offset.\n     * @param system - the System to perform the state check on\n     * @param state - the state that the blendMode will pulled from\n     */\n    private static _checkPolygonOffset(system: GlStateSystem, state: State): void\n    {\n        system.setPolygonOffset(1, state.polygonOffset);\n    }\n\n    /**\n     * @ignore\n     */\n    public destroy(): void\n    {\n        this.gl = null;\n        this.checks.length = 0;\n    }\n}\n","import type { BLEND_MODES } from '../../shared/state/const';\nimport type { GlRenderingContext } from '../context/GlRenderingContext';\n\n/**\n * Maps gl blend combinations to WebGL.\n * @param gl\n * @returns {object} Map of gl blend combinations to WebGL.\n */\nexport function mapWebGLBlendModesToPixi(gl: GlRenderingContext): Record<BLEND_MODES, number[]>\n{\n    const blendMap: Partial<Record<BLEND_MODES, number[]>> = {};\n\n    // TODO - premultiply alpha would be different.\n    // add a boolean for that!\n    blendMap.normal = [gl.ONE, gl.ONE_MINUS_SRC_ALPHA];\n    blendMap.add = [gl.ONE, gl.ONE];\n    blendMap.multiply = [gl.DST_COLOR, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA];\n    blendMap.screen = [gl.ONE, gl.ONE_MINUS_SRC_COLOR, gl.ONE, gl.ONE_MINUS_SRC_ALPHA];\n    blendMap.none = [0, 0];\n\n    // not-premultiplied blend modes\n    blendMap['normal-npm'] = [gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA];\n    blendMap['add-npm'] = [gl.SRC_ALPHA, gl.ONE, gl.ONE, gl.ONE];\n    blendMap['screen-npm'] = [gl.SRC_ALPHA, gl.ONE_MINUS_SRC_COLOR, gl.ONE, gl.ONE_MINUS_SRC_ALPHA];\n\n    blendMap.erase = [gl.ZERO, gl.ONE_MINUS_SRC_ALPHA];\n    // TODO - implement if requested!\n    // composite operations\n    // array[BLEND_MODES.SRC_IN] = [gl.DST_ALPHA, gl.ZERO];\n    // array[BLEND_MODES.SRC_OUT] = [gl.ONE_MINUS_DST_ALPHA, gl.ZERO];\n    // array[BLEND_MODES.SRC_ATOP] = [gl.DST_ALPHA, gl.ONE_MINUS_SRC_ALPHA];\n    // array[BLEND_MODES.DST_OVER] = [gl.ONE_MINUS_DST_ALPHA, gl.ONE];\n    // array[BLEND_MODES.DST_IN] = [gl.ZERO, gl.SRC_ALPHA];\n    // array[BLEND_MODES.DST_OUT] = [gl.ZERO, gl.ONE_MINUS_SRC_ALPHA];\n    // array[BLEND_MODES.DST_ATOP] = [gl.ONE_MINUS_DST_ALPHA, gl.SRC_ALPHA];\n    // array[BLEND_MODES.XOR] = [gl.ONE_MINUS_DST_ALPHA, gl.ONE_MINUS_SRC_ALPHA];\n    // SUBTRACT from flash\n    // array[BLEND_MODES.SUBTRACT] = [gl.ONE, gl.ONE, gl.ONE, gl.ONE, gl.FUNC_REVERSE_SUBTRACT, gl.FUNC_ADD];\n\n    return blendMap as Record<BLEND_MODES, number[]>;\n}\n","import { GL_FORMATS, GL_TARGETS, GL_TYPES } from './const';\n\n/**\n * Internal texture for WebGL context\n * @memberof rendering\n * @ignore\n */\nexport class GlTexture\n{\n    public target: GL_TARGETS = GL_TARGETS.TEXTURE_2D;\n\n    /** The WebGL texture. */\n    public texture: WebGLTexture;\n\n    /** Width of texture that was used in texImage2D. */\n    public width: number;\n\n    /** Height of texture that was used in texImage2D. */\n    public height: number;\n\n    /** Whether mip levels has to be generated. */\n    public mipmap: boolean;\n\n    /** Type copied from texture source. */\n    public type: number;\n\n    /** Type copied from texture source. */\n    public internalFormat: number;\n\n    /** Type of sampler corresponding to this texture. See {@link SAMPLER_TYPES} */\n    public samplerType: number;\n\n    public format: GL_FORMATS;\n\n    constructor(texture: WebGLTexture)\n    {\n        this.texture = texture;\n        this.width = -1;\n        this.height = -1;\n        this.type = GL_TYPES.UNSIGNED_BYTE;\n        this.internalFormat = GL_FORMATS.RGBA;\n        this.format = GL_FORMATS.RGBA;\n        this.samplerType = 0;\n    }\n}\n","import type { TextureSource } from '../../../shared/texture/sources/TextureSource';\nimport type { GlRenderingContext } from '../../context/GlRenderingContext';\nimport type { GlTexture } from '../GlTexture';\nimport type { GLTextureUploader } from './GLTextureUploader';\n\nexport const glUploadBufferImageResource = {\n\n    id: 'buffer',\n\n    upload(source: TextureSource, glTexture: GlTexture, gl: GlRenderingContext)\n    {\n        if (glTexture.width === source.width || glTexture.height === source.height)\n        {\n            gl.texSubImage2D(\n                gl.TEXTURE_2D,\n                0,\n                0,\n                0,\n                source.width,\n                source.height,\n                glTexture.format,\n                glTexture.type,\n                source.resource\n            );\n        }\n        else\n        {\n            gl.texImage2D(\n                glTexture.target,\n                0,\n                glTexture.internalFormat,\n                source.width,\n                source.height,\n                0,\n                glTexture.format,\n                glTexture.type,\n                source.resource\n            );\n        }\n\n        glTexture.width = source.width;\n        glTexture.height = source.height;\n    }\n} as GLTextureUploader;\n\n","import type { CompressedSource } from '../../../shared/texture/sources/CompressedSource';\nimport type { GlRenderingContext } from '../../context/GlRenderingContext';\nimport type { GlTexture } from '../GlTexture';\nimport type { GLTextureUploader } from './GLTextureUploader';\n\nconst compressedFormatMap: Record<string, boolean> = {\n    'bc1-rgba-unorm': true,\n    'bc1-rgba-unorm-srgb': true,\n    'bc2-rgba-unorm': true,\n    'bc2-rgba-unorm-srgb': true,\n    'bc3-rgba-unorm': true,\n    'bc3-rgba-unorm-srgb': true,\n    'bc4-r-unorm': true,\n    'bc4-r-snorm': true,\n    'bc5-rg-unorm': true,\n    'bc5-rg-snorm': true,\n    'bc6h-rgb-ufloat': true,\n    'bc6h-rgb-float': true,\n    'bc7-rgba-unorm': true,\n    'bc7-rgba-unorm-srgb': true,\n\n    // ETC2 compressed formats usable if \"texture-compression-etc2\" is both\n    // supported by the device/user agent and enabled in requestDevice.\n    'etc2-rgb8unorm': true,\n    'etc2-rgb8unorm-srgb': true,\n    'etc2-rgb8a1unorm': true,\n    'etc2-rgb8a1unorm-srgb': true,\n    'etc2-rgba8unorm': true,\n    'etc2-rgba8unorm-srgb': true,\n    'eac-r11unorm': true,\n    'eac-r11snorm': true,\n    'eac-rg11unorm': true,\n    'eac-rg11snorm': true,\n\n    // ASTC compressed formats usable if \"texture-compression-astc\" is both\n    // supported by the device/user agent and enabled in requestDevice.\n    'astc-4x4-unorm': true,\n    'astc-4x4-unorm-srgb': true,\n    'astc-5x4-unorm': true,\n    'astc-5x4-unorm-srgb': true,\n    'astc-5x5-unorm': true,\n    'astc-5x5-unorm-srgb': true,\n    'astc-6x5-unorm': true,\n    'astc-6x5-unorm-srgb': true,\n    'astc-6x6-unorm': true,\n    'astc-6x6-unorm-srgb': true,\n    'astc-8x5-unorm': true,\n    'astc-8x5-unorm-srgb': true,\n    'astc-8x6-unorm': true,\n    'astc-8x6-unorm-srgb': true,\n    'astc-8x8-unorm': true,\n    'astc-8x8-unorm-srgb': true,\n    'astc-10x5-unorm': true,\n    'astc-10x5-unorm-srgb': true,\n    'astc-10x6-unorm': true,\n    'astc-10x6-unorm-srgb': true,\n    'astc-10x8-unorm': true,\n    'astc-10x8-unorm-srgb': true,\n    'astc-10x10-unorm': true,\n    'astc-10x10-unorm-srgb': true,\n    'astc-12x10-unorm': true,\n    'astc-12x10-unorm-srgb': true,\n    'astc-12x12-unorm': true,\n    'astc-12x12-unorm-srgb': true,\n};\n\nexport const glUploadCompressedTextureResource = {\n\n    id: 'compressed',\n\n    upload(source: CompressedSource, glTexture: GlTexture, gl: GlRenderingContext)\n    {\n        gl.pixelStorei(gl.UNPACK_ALIGNMENT, 4);\n\n        let mipWidth = source.pixelWidth;\n        let mipHeight = source.pixelHeight;\n\n        const compressed = !!compressedFormatMap[source.format];\n\n        for (let i = 0; i < source.resource.length; i++)\n        {\n            const levelBuffer = source.resource[i];\n\n            if (compressed)\n            {\n                gl.compressedTexImage2D(\n                    gl.TEXTURE_2D, i, glTexture.internalFormat,\n                    mipWidth, mipHeight, 0,\n                    levelBuffer\n                );\n            }\n            else\n            {\n                gl.texImage2D(\n                    gl.TEXTURE_2D, i, glTexture.internalFormat,\n                    mipWidth, mipHeight, 0,\n                    glTexture.format, glTexture.type,\n                    levelBuffer);\n            }\n\n            mipWidth = Math.max(mipWidth >> 1, 1);\n            mipHeight = Math.max(mipHeight >> 1, 1);\n        }\n    }\n} as GLTextureUploader;\n\n","import type { CanvasSource } from '../../../shared/texture/sources/CanvasSource';\nimport type { ImageSource } from '../../../shared/texture/sources/ImageSource';\nimport type { GlRenderingContext } from '../../context/GlRenderingContext';\nimport type { GlTexture } from '../GlTexture';\nimport type { GLTextureUploader } from './GLTextureUploader';\n\nexport const glUploadImageResource = {\n\n    id: 'image',\n\n    upload(source: ImageSource | CanvasSource, glTexture: GlTexture, gl: GlRenderingContext, webGLVersion: number)\n    {\n        const premultipliedAlpha = source.alphaMode === 'premultiply-alpha-on-upload';\n\n        gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, premultipliedAlpha);\n\n        const glWidth = glTexture.width;\n        const glHeight = glTexture.height;\n\n        const textureWidth = source.pixelWidth;\n        const textureHeight = source.pixelHeight;\n\n        const resourceWidth = source.resourceWidth;\n        const resourceHeight = source.resourceHeight;\n\n        if (resourceWidth < textureWidth || resourceHeight < textureHeight)\n        {\n            if (glWidth !== textureWidth || glHeight !== textureHeight)\n            {\n                gl.texImage2D(\n                    glTexture.target,\n                    0,\n                    glTexture.internalFormat,\n                    textureWidth,\n                    textureHeight,\n                    0,\n                    glTexture.format,\n                    glTexture.type,\n                    null\n                );\n            }\n\n            if (webGLVersion === 2)\n            {\n                gl.texSubImage2D(\n                    gl.TEXTURE_2D,\n                    0,\n                    0,\n                    0,\n                    resourceWidth,\n                    resourceHeight,\n                    glTexture.format,\n                    glTexture.type,\n                    source.resource as TexImageSource\n                );\n            }\n            else\n            {\n                gl.texSubImage2D(\n                    gl.TEXTURE_2D,\n                    0,\n                    0,\n                    0,\n                    glTexture.format,\n                    glTexture.type,\n                    source.resource as TexImageSource\n                );\n            }\n        }\n        else if (glWidth === textureWidth || glHeight === textureHeight)\n        {\n            gl.texSubImage2D(\n                gl.TEXTURE_2D,\n                0,\n                0,\n                0,\n                glTexture.format,\n                glTexture.type,\n                source.resource as TexImageSource\n            );\n        }\n        else if (webGLVersion === 2)\n        {\n            gl.texImage2D(\n                glTexture.target,\n                0,\n                glTexture.internalFormat,\n                textureWidth,\n                textureHeight,\n                0,\n                glTexture.format,\n                glTexture.type,\n                source.resource as TexImageSource\n            );\n        }\n        else\n        {\n            gl.texImage2D(\n                glTexture.target,\n                0,\n                glTexture.internalFormat,\n                glTexture.format,\n                glTexture.type,\n                source.resource as TexImageSource\n            );\n        }\n\n        glTexture.width = textureWidth;\n        glTexture.height = textureHeight;\n    }\n} as GLTextureUploader;\n\n","import { glUploadImageResource } from './glUploadImageResource';\n\nimport type { VideoSource } from '../../../shared/texture/sources/VideoSource';\nimport type { GlRenderingContext } from '../../context/GlRenderingContext';\nimport type { GlTexture } from '../GlTexture';\nimport type { GLTextureUploader } from './GLTextureUploader';\n\nexport const glUploadVideoResource = {\n\n    id: 'video',\n\n    upload(source: VideoSource, glTexture: GlTexture, gl: GlRenderingContext, webGLVersion: number)\n    {\n        if (!source.isValid)\n        {\n            gl.texImage2D(\n                glTexture.target,\n                0,\n                glTexture.internalFormat,\n                1,\n                1,\n                0,\n                glTexture.format,\n                glTexture.type,\n                null\n            );\n\n            return;\n        }\n\n        glUploadImageResource.upload(source, glTexture, gl, webGLVersion);\n    }\n} as GLTextureUploader;\n\n","export const scaleModeToGlFilter = {\n    linear: 9729,\n    nearest: 9728,\n};\n\nexport const mipmapScaleModeToGlFilter = {\n    linear: {\n        linear: 9987,\n        nearest: 9985,\n    },\n    nearest: {\n        linear: 9986,\n        nearest: 9984,\n    }\n};\n\nexport const wrapModeToGlAddress = {\n    'clamp-to-edge': 33071,\n    repeat: 10497,\n    'mirror-repeat': 33648,\n};\n\nexport const compareModeToGlCompare = {\n    never: 512,\n    less: 513,\n    equal: 514,\n    'less-equal': 515,\n    greater: 516,\n    'not-equal': 517,\n    'greater-equal': 518,\n    always: 519,\n};\n\n","import {\n    compareModeToGlCompare,\n    mipmapScaleModeToGlFilter,\n    scaleModeToGlFilter,\n    wrapModeToGlAddress\n} from './pixiToGlMaps';\n\nimport type { TextureStyle } from '../../../shared/texture/TextureStyle';\n\nexport function applyStyleParams(\n    style: TextureStyle,\n    gl: WebGL2RenderingContext,\n    mipmaps: boolean,\n    // eslint-disable-next-line camelcase\n    anisotropicExt: EXT_texture_filter_anisotropic,\n    glFunctionName: 'samplerParameteri' | 'texParameteri',\n    firstParam: 3553 | WebGLSampler,\n    forceClamp: boolean,\n    /** if true we can skip setting certain values if the values is the same as the default gl values */\n    firstCreation: boolean\n)\n{\n    const castParam = firstParam as 3553;\n\n    if (!firstCreation\n        || style.addressModeU !== 'repeat'\n        || style.addressModeV !== 'repeat'\n        || style.addressModeW !== 'repeat'\n    )\n    {\n        // 1. set the wrapping mode\n        const wrapModeS = wrapModeToGlAddress[forceClamp ? 'clamp-to-edge' : style.addressModeU];\n        const wrapModeT = wrapModeToGlAddress[forceClamp ? 'clamp-to-edge' : style.addressModeV];\n        const wrapModeR = wrapModeToGlAddress[forceClamp ? 'clamp-to-edge' : style.addressModeW];\n\n        gl[glFunctionName](castParam, gl.TEXTURE_WRAP_S, wrapModeS);\n        gl[glFunctionName](castParam, gl.TEXTURE_WRAP_T, wrapModeT);\n\n        // does not exist in webGL1\n        if (gl.TEXTURE_WRAP_R) gl[glFunctionName](castParam, gl.TEXTURE_WRAP_R, wrapModeR);\n    }\n\n    if (!firstCreation || style.magFilter !== 'linear')\n    {\n        // 2. set the filtering mode\n        gl[glFunctionName](castParam, gl.TEXTURE_MAG_FILTER, scaleModeToGlFilter[style.magFilter]);\n    }\n\n    // assuming the currently bound texture is the one we want to set the filter for\n    // the only smelly part of this code, WebGPU is much better here :P\n    if (mipmaps)\n    {\n        if (!firstCreation || style.mipmapFilter !== 'linear')\n        {\n            const glFilterMode = mipmapScaleModeToGlFilter[style.minFilter][style.mipmapFilter];\n\n            gl[glFunctionName](castParam, gl.TEXTURE_MIN_FILTER, glFilterMode);\n        }\n    }\n\n    else\n    {\n        gl[glFunctionName](castParam, gl.TEXTURE_MIN_FILTER, scaleModeToGlFilter[style.minFilter]);\n    }\n\n    // 3. set the anisotropy\n    if (anisotropicExt && style.maxAnisotropy > 1)\n    {\n        const level = Math.min(style.maxAnisotropy, gl.getParameter(anisotropicExt.MAX_TEXTURE_MAX_ANISOTROPY_EXT));\n\n        gl[glFunctionName](castParam, anisotropicExt.TEXTURE_MAX_ANISOTROPY_EXT, level);\n    }\n\n    // 4. set the compare mode\n    if (style.compare)\n    {\n        gl[glFunctionName](castParam, gl.TEXTURE_COMPARE_FUNC, compareModeToGlCompare[style.compare]);\n    }\n}\n","import { DOMAdapter } from '../../../../environment/adapter';\nimport { ExtensionType } from '../../../../extensions/Extensions';\nimport { Texture } from '../../shared/texture/Texture';\nimport { GlTexture } from './GlTexture';\nimport { glUploadBufferImageResource } from './uploaders/glUploadBufferImageResource';\nimport { glUploadCompressedTextureResource } from './uploaders/glUploadCompressedTextureResource';\nimport { glUploadImageResource } from './uploaders/glUploadImageResource';\nimport { glUploadVideoResource } from './uploaders/glUploadVideoResource';\nimport { applyStyleParams } from './utils/applyStyleParams';\nimport { mapFormatToGlFormat } from './utils/mapFormatToGlFormat';\nimport { mapFormatToGlInternalFormat } from './utils/mapFormatToGlInternalFormat';\nimport { mapFormatToGlType } from './utils/mapFormatToGlType';\nimport { unpremultiplyAlpha } from './utils/unpremultiplyAlpha';\n\nimport type { ICanvas } from '../../../../environment/canvas/ICanvas';\nimport type { System } from '../../shared/system/System';\nimport type { CanvasGenerator, GetPixelsOutput } from '../../shared/texture/GenerateCanvas';\nimport type { TextureSource } from '../../shared/texture/sources/TextureSource';\nimport type { BindableTexture } from '../../shared/texture/Texture';\nimport type { TextureStyle } from '../../shared/texture/TextureStyle';\nimport type { GlRenderingContext } from '../context/GlRenderingContext';\nimport type { WebGLRenderer } from '../WebGLRenderer';\nimport type { GLTextureUploader } from './uploaders/GLTextureUploader';\n\nconst BYTES_PER_PIXEL = 4;\n\n/**\n * The system for managing textures in WebGL.\n * @memberof rendering\n */\nexport class GlTextureSystem implements System, CanvasGenerator\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n        ],\n        name: 'texture',\n    } as const;\n\n    public readonly managedTextures: TextureSource[] = [];\n\n    private readonly _renderer: WebGLRenderer;\n\n    private _glTextures: Record<number, GlTexture> = Object.create(null);\n    private _glSamplers: Record<string, WebGLSampler> = Object.create(null);\n\n    private _boundTextures: TextureSource[] = [];\n    private _activeTextureLocation = -1;\n\n    private _boundSamplers: Record<number, WebGLSampler> = Object.create(null);\n\n    private readonly _uploads: Record<string, GLTextureUploader> = {\n        image: glUploadImageResource,\n        buffer: glUploadBufferImageResource,\n        video: glUploadVideoResource,\n        compressed: glUploadCompressedTextureResource,\n    };\n\n    private _gl: GlRenderingContext;\n    private _mapFormatToInternalFormat: Record<string, number>;\n    private _mapFormatToType: Record<string, number>;\n    private _mapFormatToFormat: Record<string, number>;\n\n    // TODO - separate samplers will be a cool thing to add, but not right now!\n    private readonly _useSeparateSamplers = false;\n\n    constructor(renderer: WebGLRenderer)\n    {\n        this._renderer = renderer;\n    }\n\n    protected contextChange(gl: GlRenderingContext): void\n    {\n        this._gl = gl;\n\n        if (!this._mapFormatToInternalFormat)\n        {\n            this._mapFormatToInternalFormat = mapFormatToGlInternalFormat(gl, this._renderer.context.extensions);\n\n            this._mapFormatToType = mapFormatToGlType(gl);\n            this._mapFormatToFormat = mapFormatToGlFormat(gl);\n        }\n\n        this._glTextures = Object.create(null);\n        this._glSamplers = Object.create(null);\n        this._boundSamplers = Object.create(null);\n\n        for (let i = 0; i < 16; i++)\n        {\n            this.bind(Texture.EMPTY, i);\n        }\n    }\n\n    public initSource(source: TextureSource)\n    {\n        this.bind(source);\n    }\n\n    public bind(texture: BindableTexture, location = 0)\n    {\n        const source = texture.source;\n\n        if (texture)\n        {\n            this.bindSource(source, location);\n\n            if (this._useSeparateSamplers)\n            {\n                this._bindSampler(source.style, location);\n            }\n        }\n        else\n        {\n            this.bindSource(null, location);\n\n            if (this._useSeparateSamplers)\n            {\n                this._bindSampler(null, location);\n            }\n        }\n    }\n\n    public bindSource(source: TextureSource, location = 0): void\n    {\n        const gl = this._gl;\n\n        source._touched = this._renderer.textureGC.count;\n\n        if (this._boundTextures[location] !== source)\n        {\n            this._boundTextures[location] = source;\n            this._activateLocation(location);\n\n            source = source || Texture.EMPTY.source;\n\n            // bind texture and source!\n            const glTexture = this.getGlSource(source);\n\n            gl.bindTexture(glTexture.target, glTexture.texture);\n        }\n    }\n\n    private _bindSampler(style: TextureStyle, location = 0): void\n    {\n        const gl = this._gl;\n\n        if (!style)\n        {\n            this._boundSamplers[location] = null;\n            gl.bindSampler(location, null);\n\n            return;\n        }\n\n        const sampler = this._getGlSampler(style);\n\n        if (this._boundSamplers[location] !== sampler)\n        {\n            this._boundSamplers[location] = sampler;\n            gl.bindSampler(location, sampler);\n        }\n    }\n\n    public unbind(texture: BindableTexture): void\n    {\n        const source = texture.source;\n        const boundTextures = this._boundTextures;\n        const gl = this._gl;\n\n        for (let i = 0; i < boundTextures.length; i++)\n        {\n            if (boundTextures[i] === source)\n            {\n                this._activateLocation(i);\n\n                const glTexture = this.getGlSource(source);\n\n                gl.bindTexture(glTexture.target, null);\n                boundTextures[i] = null;\n            }\n        }\n    }\n\n    private _activateLocation(location: number): void\n    {\n        if (this._activeTextureLocation !== location)\n        {\n            this._activeTextureLocation = location;\n            this._gl.activeTexture(this._gl.TEXTURE0 + location);\n        }\n    }\n\n    private _initSource(source: TextureSource): GlTexture\n    {\n        const gl = this._gl;\n\n        const glTexture = new GlTexture(gl.createTexture());\n\n        glTexture.type = this._mapFormatToType[source.format];\n        glTexture.internalFormat = this._mapFormatToInternalFormat[source.format];\n        glTexture.format = this._mapFormatToFormat[source.format];\n\n        if (source.autoGenerateMipmaps && (this._renderer.context.supports.nonPowOf2mipmaps || source.isPowerOfTwo))\n        {\n            const biggestDimension = Math.max(source.width, source.height);\n\n            source.mipLevelCount = Math.floor(Math.log2(biggestDimension)) + 1;\n        }\n\n        this._glTextures[source.uid] = glTexture;\n\n        if (!this.managedTextures.includes(source))\n        {\n            source.on('update', this.onSourceUpdate, this);\n            source.on('resize', this.onSourceUpdate, this);\n            source.on('styleChange', this.onStyleChange, this);\n            source.on('destroy', this.onSourceDestroy, this);\n            source.on('unload', this.onSourceUnload, this);\n            source.on('updateMipmaps', this.onUpdateMipmaps, this);\n\n            this.managedTextures.push(source);\n        }\n\n        this.onSourceUpdate(source);\n        this.updateStyle(source, false);\n\n        return glTexture;\n    }\n\n    protected onStyleChange(source: TextureSource): void\n    {\n        this.updateStyle(source, false);\n    }\n\n    protected updateStyle(source: TextureSource, firstCreation: boolean): void\n    {\n        const gl = this._gl;\n\n        const glTexture = this.getGlSource(source);\n\n        gl.bindTexture(gl.TEXTURE_2D, glTexture.texture);\n\n        this._boundTextures[this._activeTextureLocation] = source;\n\n        applyStyleParams(\n            source.style,\n            gl,\n            source.mipLevelCount > 1,\n            this._renderer.context.extensions.anisotropicFiltering,\n            'texParameteri',\n            gl.TEXTURE_2D,\n            // will force a clamp to edge if the texture is not a power of two\n            !this._renderer.context.supports.nonPowOf2wrapping && !source.isPowerOfTwo,\n            firstCreation,\n        );\n    }\n\n    protected onSourceUnload(source: TextureSource): void\n    {\n        const glTexture = this._glTextures[source.uid];\n\n        if (!glTexture) return;\n\n        this.unbind(source);\n        this._glTextures[source.uid] = null;\n\n        this._gl.deleteTexture(glTexture.texture);\n    }\n\n    protected onSourceUpdate(source: TextureSource): void\n    {\n        const gl = this._gl;\n\n        const glTexture = this.getGlSource(source);\n\n        gl.bindTexture(gl.TEXTURE_2D, glTexture.texture);\n\n        this._boundTextures[this._activeTextureLocation] = source;\n\n        if (this._uploads[source.uploadMethodId])\n        {\n            this._uploads[source.uploadMethodId].upload(source, glTexture, gl, this._renderer.context.webGLVersion);\n        }\n        else\n        {\n            // eslint-disable-next-line max-len\n            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, source.pixelWidth, source.pixelHeight, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\n        }\n\n        if (source.autoGenerateMipmaps && source.mipLevelCount > 1)\n        {\n            this.onUpdateMipmaps(source, false);\n        }\n    }\n\n    protected onUpdateMipmaps(source: TextureSource, bind = true): void\n    {\n        if (bind) this.bindSource(source, 0);\n\n        const glTexture = this.getGlSource(source);\n\n        this._gl.generateMipmap(glTexture.target);\n    }\n\n    protected onSourceDestroy(source: TextureSource): void\n    {\n        source.off('destroy', this.onSourceDestroy, this);\n        source.off('update', this.onSourceUpdate, this);\n        source.off('resize', this.onSourceUpdate, this);\n        source.off('unload', this.onSourceUnload, this);\n        source.off('styleChange', this.onStyleChange, this);\n        source.off('updateMipmaps', this.onUpdateMipmaps, this);\n\n        this.managedTextures.splice(this.managedTextures.indexOf(source), 1);\n\n        this.onSourceUnload(source);\n    }\n\n    private _initSampler(style: TextureStyle): WebGLSampler\n    {\n        const gl = this._gl;\n\n        const glSampler = this._gl.createSampler();\n\n        this._glSamplers[style._resourceId] = glSampler;\n\n        applyStyleParams(\n            style,\n            gl,\n            this._boundTextures[this._activeTextureLocation].mipLevelCount > 1,\n            this._renderer.context.extensions.anisotropicFiltering,\n            'samplerParameteri',\n            glSampler,\n            false,\n            true,\n        );\n\n        return this._glSamplers[style._resourceId];\n    }\n\n    private _getGlSampler(sampler: TextureStyle): WebGLSampler\n    {\n        return this._glSamplers[sampler._resourceId] || this._initSampler(sampler);\n    }\n\n    public getGlSource(source: TextureSource): GlTexture\n    {\n        return this._glTextures[source.uid] || this._initSource(source);\n    }\n\n    public generateCanvas(texture: Texture): ICanvas\n    {\n        const { pixels, width, height } = this.getPixels(texture);\n\n        const canvas = DOMAdapter.get().createCanvas();\n\n        canvas.width = width;\n        canvas.height = height;\n\n        const ctx = canvas.getContext('2d');\n\n        if (ctx)\n        {\n            const imageData = ctx.createImageData(width, height);\n\n            imageData.data.set(pixels);\n            ctx.putImageData(imageData, 0, 0);\n        }\n\n        return canvas;\n    }\n\n    public getPixels(texture: Texture): GetPixelsOutput\n    {\n        const resolution = texture.source.resolution;\n        const frame = texture.frame;\n\n        const width = Math.max(Math.round(frame.width * resolution), 1);\n        const height = Math.max(Math.round(frame.height * resolution), 1);\n        const pixels = new Uint8Array(BYTES_PER_PIXEL * width * height);\n\n        const renderer = this._renderer;\n\n        const renderTarget = renderer.renderTarget.getRenderTarget(texture);\n        const glRenterTarget = renderer.renderTarget.getGpuRenderTarget(renderTarget);\n\n        const gl = renderer.gl;\n\n        gl.bindFramebuffer(gl.FRAMEBUFFER, glRenterTarget.resolveTargetFramebuffer);\n\n        gl.readPixels(\n            Math.round(frame.x * resolution),\n            Math.round(frame.y * resolution),\n            width,\n            height,\n            gl.RGBA,\n            gl.UNSIGNED_BYTE,\n            pixels\n        );\n\n        // if (texture.source.premultiplyAlpha > 0)\n        // TODO - premultiplied alpha does not exist right now, need to add that back in!\n        // eslint-disable-next-line no-constant-condition\n        if (false)\n        {\n            unpremultiplyAlpha(pixels);\n        }\n\n        return { pixels: new Uint8ClampedArray(pixels.buffer), width, height };\n    }\n\n    public destroy(): void\n    {\n        // we copy the array as the array with a slice as onSourceDestroy\n        // will remove the source from the real managedTextures array\n        this.managedTextures\n            .slice()\n            .forEach((source) => this.onSourceDestroy(source));\n\n        (this.managedTextures as null) = null;\n\n        (this._renderer as null) = null;\n    }\n}\n\n","import { DOMAdapter } from '../../../../../environment/adapter';\n\nimport type { GlRenderingContext } from '../../context/GlRenderingContext';\nimport type { WebGLExtensions } from '../../context/WebGLExtensions';\n\n/**\n * Returns a lookup table that maps each type-format pair to a compatible internal format.\n * @function mapTypeAndFormatToInternalFormat\n * @private\n * @param gl - The rendering context.\n * @param extensions - The WebGL extensions.\n * @returns Lookup table.\n */\nexport function mapFormatToGlInternalFormat(\n    gl: GlRenderingContext,\n    extensions: WebGLExtensions,\n): Record<string, number>\n{\n    let srgb = {};\n    let bgra8unorm: number = gl.RGBA;\n\n    if (!(gl instanceof DOMAdapter.get().getWebGLRenderingContext()))\n    {\n        srgb = {\n            'rgba8unorm-srgb': gl.SRGB8_ALPHA8,\n            'bgra8unorm-srgb': gl.SRGB8_ALPHA8,\n        };\n\n        bgra8unorm = gl.RGBA8;\n    }\n    else if (extensions.srgb)\n    {\n        srgb = {\n            'rgba8unorm-srgb': extensions.srgb.SRGB8_ALPHA8_EXT,\n            'bgra8unorm-srgb': extensions.srgb.SRGB8_ALPHA8_EXT,\n        };\n    }\n\n    return {\n        // 8-bit formats\n        r8unorm: gl.R8,\n        r8snorm: gl.R8_SNORM,\n        r8uint: gl.R8UI,\n        r8sint: gl.R8I,\n\n        // 16-bit formats\n        r16uint: gl.R16UI,\n        r16sint: gl.R16I,\n        r16float: gl.R16F,\n        rg8unorm: gl.RG8,\n        rg8snorm: gl.RG8_SNORM,\n        rg8uint: gl.RG8UI,\n        rg8sint: gl.RG8I,\n\n        // 32-bit formats\n        r32uint: gl.R32UI,\n        r32sint: gl.R32I,\n        r32float: gl.R32F,\n        rg16uint: gl.RG16UI,\n        rg16sint: gl.RG16I,\n        rg16float: gl.RG16F,\n        rgba8unorm: gl.RGBA,\n\n        ...srgb,\n\n        // Packed 32-bit formats\n        rgba8snorm: gl.RGBA8_SNORM,\n        rgba8uint: gl.RGBA8UI,\n        rgba8sint: gl.RGBA8I,\n        bgra8unorm,\n        rgb9e5ufloat: gl.RGB9_E5,\n        rgb10a2unorm: gl.RGB10_A2,\n        rg11b10ufloat: gl.R11F_G11F_B10F,\n\n        // 64-bit formats\n        rg32uint: gl.RG32UI,\n        rg32sint: gl.RG32I,\n        rg32float: gl.RG32F,\n        rgba16uint: gl.RGBA16UI,\n        rgba16sint: gl.RGBA16I,\n        rgba16float: gl.RGBA16F,\n\n        // 128-bit formats\n        rgba32uint: gl.RGBA32UI,\n        rgba32sint: gl.RGBA32I,\n        rgba32float: gl.RGBA32F,\n\n        // Depth/stencil formats\n        stencil8: gl.STENCIL_INDEX8,\n        depth16unorm: gl.DEPTH_COMPONENT16,\n        depth24plus: gl.DEPTH_COMPONENT24,\n        'depth24plus-stencil8': gl.DEPTH24_STENCIL8,\n        depth32float: gl.DEPTH_COMPONENT32F,\n        'depth32float-stencil8': gl.DEPTH32F_STENCIL8,\n\n        // Compressed formats\n        ...extensions.s3tc ? {\n            'bc1-rgba-unorm': extensions.s3tc.COMPRESSED_RGBA_S3TC_DXT1_EXT,\n            'bc2-rgba-unorm': extensions.s3tc.COMPRESSED_RGBA_S3TC_DXT3_EXT,\n            'bc3-rgba-unorm': extensions.s3tc.COMPRESSED_RGBA_S3TC_DXT5_EXT,\n        } : {},\n        ...extensions.s3tc_sRGB ? {\n            'bc1-rgba-unorm-srgb': extensions.s3tc_sRGB.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT,\n            'bc2-rgba-unorm-srgb': extensions.s3tc_sRGB.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT,\n            'bc3-rgba-unorm-srgb': extensions.s3tc_sRGB.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT,\n        } : {},\n        ...extensions.rgtc ? {\n            'bc4-r-unorm': extensions.rgtc.COMPRESSED_RED_RGTC1_EXT,\n            'bc4-r-snorm': extensions.rgtc.COMPRESSED_SIGNED_RED_RGTC1_EXT,\n            'bc5-rg-unorm': extensions.rgtc.COMPRESSED_RED_GREEN_RGTC2_EXT,\n            'bc5-rg-snorm': extensions.rgtc.COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT,\n        } : {},\n        ...extensions.bptc ? {\n            'bc6h-rgb-float': extensions.bptc.COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT,\n            'bc6h-rgb-ufloat': extensions.bptc.COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT,\n            'bc7-rgba-unorm': extensions.bptc.COMPRESSED_RGBA_BPTC_UNORM_EXT,\n            'bc7-rgba-unorm-srgb': extensions.bptc.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT,\n        } : {},\n        ...extensions.etc ? {\n            'etc2-rgb8unorm': extensions.etc.COMPRESSED_RGB8_ETC2,\n            'etc2-rgb8unorm-srgb': extensions.etc.COMPRESSED_SRGB8_ETC2,\n            'etc2-rgb8a1unorm': extensions.etc.COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2,\n            'etc2-rgb8a1unorm-srgb': extensions.etc.COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2,\n            'etc2-rgba8unorm': extensions.etc.COMPRESSED_RGBA8_ETC2_EAC,\n            'etc2-rgba8unorm-srgb': extensions.etc.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC,\n            'eac-r11unorm': extensions.etc.COMPRESSED_R11_EAC,\n            // 'eac-r11snorm'\n            'eac-rg11unorm': extensions.etc.COMPRESSED_SIGNED_RG11_EAC,\n            // 'eac-rg11snorm'\n        } : {},\n        ...extensions.astc ? {\n            'astc-4x4-unorm': extensions.astc.COMPRESSED_RGBA_ASTC_4x4_KHR,\n            'astc-4x4-unorm-srgb': extensions.astc.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR,\n            'astc-5x4-unorm': extensions.astc.COMPRESSED_RGBA_ASTC_5x4_KHR,\n            'astc-5x4-unorm-srgb': extensions.astc.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR,\n            'astc-5x5-unorm': extensions.astc.COMPRESSED_RGBA_ASTC_5x5_KHR,\n            'astc-5x5-unorm-srgb': extensions.astc.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR,\n            'astc-6x5-unorm': extensions.astc.COMPRESSED_RGBA_ASTC_6x5_KHR,\n            'astc-6x5-unorm-srgb': extensions.astc.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR,\n            'astc-6x6-unorm': extensions.astc.COMPRESSED_RGBA_ASTC_6x6_KHR,\n            'astc-6x6-unorm-srgb': extensions.astc.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR,\n            'astc-8x5-unorm': extensions.astc.COMPRESSED_RGBA_ASTC_8x5_KHR,\n            'astc-8x5-unorm-srgb': extensions.astc.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR,\n            'astc-8x6-unorm':   extensions.astc.COMPRESSED_RGBA_ASTC_8x6_KHR,\n            'astc-8x6-unorm-srgb': extensions.astc.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR,\n            'astc-8x8-unorm': extensions.astc.COMPRESSED_RGBA_ASTC_8x8_KHR,\n            'astc-8x8-unorm-srgb': extensions.astc.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR,\n            'astc-10x5-unorm': extensions.astc.COMPRESSED_RGBA_ASTC_10x5_KHR,\n            'astc-10x5-unorm-srgb': extensions.astc.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR,\n            'astc-10x6-unorm': extensions.astc.COMPRESSED_RGBA_ASTC_10x6_KHR,\n            'astc-10x6-unorm-srgb': extensions.astc.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR,\n            'astc-10x8-unorm': extensions.astc.COMPRESSED_RGBA_ASTC_10x8_KHR,\n            'astc-10x8-unorm-srgb': extensions.astc.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR,\n            'astc-10x10-unorm': extensions.astc.COMPRESSED_RGBA_ASTC_10x10_KHR,\n            'astc-10x10-unorm-srgb': extensions.astc.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR,\n            'astc-12x10-unorm': extensions.astc.COMPRESSED_RGBA_ASTC_12x10_KHR,\n            'astc-12x10-unorm-srgb': extensions.astc.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR,\n            'astc-12x12-unorm': extensions.astc.COMPRESSED_RGBA_ASTC_12x12_KHR,\n            'astc-12x12-unorm-srgb': extensions.astc.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR,\n        } : {},\n    };\n}\n","import type { GlRenderingContext } from '../../context/GlRenderingContext';\n\n/**\n * Returns a lookup table that maps each type-format pair to a compatible internal format.\n * @function mapTypeAndFormatToInternalFormat\n * @private\n * @param {WebGLRenderingContext} gl - The rendering context.\n * @returns Lookup table.\n */\nexport function mapFormatToGlType(gl: GlRenderingContext): Record<string, number>\n{\n    return {\n        // 8-bit formats\n        r8unorm: gl.UNSIGNED_BYTE,\n        r8snorm: gl.BYTE,\n        r8uint: gl.UNSIGNED_BYTE,\n        r8sint: gl.BYTE,\n\n        // 16-bit formats\n        r16uint: gl.UNSIGNED_SHORT,\n        r16sint: gl.SHORT,\n        r16float: gl.HALF_FLOAT,\n        rg8unorm: gl.UNSIGNED_BYTE,\n        rg8snorm: gl.BYTE,\n        rg8uint: gl.UNSIGNED_BYTE,\n        rg8sint: gl.BYTE,\n\n        // 32-bit formats\n        r32uint: gl.UNSIGNED_INT,\n        r32sint: gl.INT,\n        r32float: gl.FLOAT,\n        rg16uint: gl.UNSIGNED_SHORT,\n        rg16sint: gl.SHORT,\n        rg16float: gl.HALF_FLOAT,\n        rgba8unorm: gl.UNSIGNED_BYTE,\n        'rgba8unorm-srgb': gl.UNSIGNED_BYTE,\n\n        // Packed 32-bit formats\n        rgba8snorm: gl.BYTE,\n        rgba8uint: gl.UNSIGNED_BYTE,\n        rgba8sint: gl.BYTE,\n        bgra8unorm: gl.UNSIGNED_BYTE,\n        'bgra8unorm-srgb': gl.UNSIGNED_BYTE,\n        rgb9e5ufloat: gl.UNSIGNED_INT_5_9_9_9_REV,\n        rgb10a2unorm: gl.UNSIGNED_INT_2_10_10_10_REV,\n        rg11b10ufloat: gl.UNSIGNED_INT_10F_11F_11F_REV,\n\n        // 64-bit formats\n        rg32uint: gl.UNSIGNED_INT,\n        rg32sint: gl.INT,\n        rg32float: gl.FLOAT,\n        rgba16uint: gl.UNSIGNED_SHORT,\n        rgba16sint: gl.SHORT,\n        rgba16float: gl.HALF_FLOAT,\n\n        // 128-bit formats\n        rgba32uint: gl.UNSIGNED_INT,\n        rgba32sint: gl.INT,\n        rgba32float: gl.FLOAT,\n\n        // Depth/stencil formats\n        stencil8: gl.UNSIGNED_BYTE,\n        depth16unorm: gl.UNSIGNED_SHORT,\n        depth24plus: gl.UNSIGNED_INT,\n        'depth24plus-stencil8': gl.UNSIGNED_INT_24_8,\n        depth32float: gl.FLOAT,\n        'depth32float-stencil8': gl.FLOAT_32_UNSIGNED_INT_24_8_REV,\n\n    };\n}\n","import type { GlRenderingContext } from '../../context/GlRenderingContext';\n\n/**\n * Returns a lookup table that maps each type-format pair to a compatible internal format.\n * @function mapTypeAndFormatToInternalFormat\n * @private\n * @param {WebGLRenderingContext} gl - The rendering context.\n * @returns Lookup table.\n */\nexport function mapFormatToGlFormat(gl: GlRenderingContext): Record<string, number>\n{\n    return {\n        // 8-bit formats\n        r8unorm: gl.RED,\n        r8snorm: gl.RED,\n        r8uint: gl.RED,\n        r8sint: gl.RED,\n\n        // 16-bit formats\n        r16uint: gl.RED,\n        r16sint:    gl.RED,\n        r16float: gl.RED,\n        rg8unorm:  gl.RG,\n        rg8snorm:   gl.RG,\n        rg8uint:  gl.RG,\n        rg8sint:  gl.RG,\n\n        // 32-bit formats\n        r32uint: gl.RED,\n        r32sint: gl.RED,\n        r32float: gl.RED,\n        rg16uint:   gl.RG,\n        rg16sint:  gl.RG,\n        rg16float:  gl.RG,\n        rgba8unorm: gl.RGBA,\n        'rgba8unorm-srgb': gl.RGBA,\n\n        // Packed 32-bit formats\n        rgba8snorm: gl.RGBA,\n        rgba8uint: gl.RGBA,\n        rgba8sint: gl.RGBA,\n        bgra8unorm: gl.RGBA,\n        'bgra8unorm-srgb': gl.RGBA,\n        rgb9e5ufloat: gl.RGB,\n        rgb10a2unorm: gl.RGBA,\n        rg11b10ufloat: gl.RGB,\n\n        // 64-bit formats\n        rg32uint: gl.RG,\n        rg32sint: gl.RG,\n        rg32float:  gl.RG,\n        rgba16uint: gl.RGBA,\n        rgba16sint: gl.RGBA,\n        rgba16float: gl.RGBA,\n\n        // 128-bit formats\n        rgba32uint: gl.RGBA,\n        rgba32sint: gl.RGBA,\n        rgba32float: gl.RGBA,\n\n        // Depth/stencil formats\n        stencil8: gl.STENCIL_INDEX8,\n        depth16unorm: gl.DEPTH_COMPONENT,\n        depth24plus: gl.DEPTH_COMPONENT,\n        'depth24plus-stencil8': gl.DEPTH_STENCIL,\n        depth32float: gl.DEPTH_COMPONENT,\n        'depth32float-stencil8': gl.DEPTH_STENCIL,\n\n    };\n}\n","import { extensions, ExtensionType } from '../../../extensions/Extensions';\nimport { GlGraphicsAdaptor } from '../../../scene/graphics/gl/GlGraphicsAdaptor';\nimport { GlMeshAdaptor } from '../../../scene/mesh/gl/GlMeshAdaptor';\nimport { GlBatchAdaptor } from '../../batcher/gl/GlBatchAdaptor';\nimport { AbstractRenderer } from '../shared/system/AbstractRenderer';\nimport { SharedRenderPipes, SharedSystems } from '../shared/system/SharedSystems';\nimport { RendererType } from '../types';\nimport { GlBufferSystem } from './buffer/GlBufferSystem';\nimport { GlContextSystem } from './context/GlContextSystem';\nimport { GlGeometrySystem } from './geometry/GlGeometrySystem';\nimport { GlBackBufferSystem } from './GlBackBufferSystem';\nimport { GlColorMaskSystem } from './GlColorMaskSystem';\nimport { GlEncoderSystem } from './GlEncoderSystem';\nimport { GlStencilSystem } from './GlStencilSystem';\nimport { GlUboSystem } from './GlUboSystem';\nimport { GlRenderTargetSystem } from './renderTarget/GlRenderTargetSystem';\nimport { GlShaderSystem } from './shader/GlShaderSystem';\nimport { GlUniformGroupSystem } from './shader/GlUniformGroupSystem';\nimport { GlStateSystem } from './state/GlStateSystem';\nimport { GlTextureSystem } from './texture/GlTextureSystem';\n\nimport type { ICanvas } from '../../../environment/canvas/ICanvas';\nimport type { PipeConstructor } from '../shared/instructions/RenderPipe';\nimport type { SharedRendererOptions } from '../shared/system/SharedSystems';\nimport type { SystemConstructor } from '../shared/system/System';\nimport type { ExtractRendererOptions, ExtractSystemTypes } from '../shared/system/utils/typeUtils';\nimport type { GlRenderingContext } from './context/GlRenderingContext';\n\nconst DefaultWebGLSystems = [\n    ...SharedSystems,\n    GlUboSystem,\n    GlBackBufferSystem,\n    GlContextSystem,\n    GlBufferSystem,\n    GlTextureSystem,\n    GlRenderTargetSystem,\n    GlGeometrySystem,\n    GlUniformGroupSystem,\n    GlShaderSystem,\n    GlEncoderSystem,\n    GlStateSystem,\n    GlStencilSystem,\n    GlColorMaskSystem,\n];\nconst DefaultWebGLPipes = [...SharedRenderPipes];\nconst DefaultWebGLAdapters = [GlBatchAdaptor, GlMeshAdaptor, GlGraphicsAdaptor];\n\n// installed systems will bbe added to this array by the extensions manager..\nconst systems: { name: string; value: SystemConstructor }[] = [];\nconst renderPipes: { name: string; value: PipeConstructor }[] = [];\nconst renderPipeAdaptors: { name: string; value: any }[] = [];\n\nextensions.handleByNamedList(ExtensionType.WebGLSystem, systems);\nextensions.handleByNamedList(ExtensionType.WebGLPipes, renderPipes);\nextensions.handleByNamedList(ExtensionType.WebGLPipesAdaptor, renderPipeAdaptors);\n\n// add all the default systems as well as any user defined ones from the extensions\nextensions.add(...DefaultWebGLSystems, ...DefaultWebGLPipes, ...DefaultWebGLAdapters);\n\n/** The default WebGL renderer, uses WebGL2 contexts. */\ntype WebGLSystems = ExtractSystemTypes<typeof DefaultWebGLSystems> & PixiMixins.RendererSystems & PixiMixins.WebGLSystems;\n\n/** The default WebGL renderer, uses WebGL2 contexts. */\nexport type WebGLPipes = ExtractSystemTypes<typeof DefaultWebGLPipes> & PixiMixins.RendererPipes & PixiMixins.WebGLPipes;\n\n/**\n * Options for WebGLRenderer.\n * @memberof rendering\n */\nexport interface WebGLOptions\n    extends\n    SharedRendererOptions,\n    ExtractRendererOptions<typeof DefaultWebGLSystems>,\n    PixiMixins.WebGLOptions {}\n\n/**\n * The default WebGL renderer, uses WebGL2 contexts.\n * @memberof rendering\n */\nexport interface WebGLRenderer<T extends ICanvas = HTMLCanvasElement>\n    extends AbstractRenderer<WebGLPipes, WebGLOptions, T>,\n    WebGLSystems {}\n\n/* eslint-disable max-len */\n/**\n * The WebGL PixiJS Renderer. This renderer allows you to use the most common graphics API, WebGL (and WebGL2).\n *\n * ```ts\n * // Create a new renderer\n * const renderer = new WebGLRenderer();\n * await renderer.init();\n *\n * // Add the renderer to the stage\n * document.body.appendChild(renderer.canvas);\n *\n * // Create a new stage\n * const stage = new Container();\n *\n * // Render the stage\n * renderer.render(stage);\n * ```\n *\n * You can use {@link rendering.autoDetectRenderer} to create a renderer that will automatically detect the best\n * renderer for the environment.\n *\n *\n * ```ts\n * // Create a new renderer\n * const renderer = await rendering.autoDetectRenderer({\n *    preference:'webgl',\n * });\n * ```\n *\n * The renderer is composed of systems that manage specific tasks. The following systems are added by default\n * whenever you create a WebGL renderer:\n *\n * | WebGL Core Systems                          | Systems that are specific to the WebGL renderer                               |\n * | ------------------------------------------- | ----------------------------------------------------------------------------- |\n * | {@link rendering.GlUboSystem}               | This manages WebGL2 uniform buffer objects feature for shaders                |\n * | {@link rendering.GlBackBufferSystem}        | manages the back buffer, used so that we can pixi can pixels from the screen  |\n * | {@link rendering.GlContextSystem}           | This manages the WebGL context and its extensions                             |\n * | {@link rendering.GlBufferSystem}            | This manages buffers and their GPU resources, keeps everything in sync        |\n * | {@link rendering.GlTextureSystem}           | This manages textures and their GPU resources, keeps everything in sync       |\n * | {@link rendering.GlRenderTargetSystem}      | This manages what we render too. For example the screen, or another texture   |\n * | {@link rendering.GlGeometrySystem}          | This manages geometry, used for drawing meshes via the GPU                    |\n * | {@link rendering.GlUniformGroupSystem}      | This manages uniform groups. Syncing shader properties with the GPU           |\n * | {@link rendering.GlShaderSystem}            | This manages shaders, programs that run on the GPU to output lovely pixels    |\n * | {@link rendering.GlEncoderSystem}           | This manages encoders, a WebGPU Paradigm, use it to draw a mesh + shader      |\n * | {@link rendering.GlStateSystem}             | This manages the state of the WebGL context. eg the various flags that can be set blend modes / depthTesting etc |\n * | {@link rendering.GlStencilSystem}           | This manages the stencil buffer. Used primarily for masking                   |\n * | {@link rendering.GlColorMaskSystem}         | This manages the color mask. Used for color masking                           |\n *\n * The breadth of the API surface provided by the renderer is contained within these systems.\n * @memberof rendering\n * @property {rendering.GlUboSystem} ubo - UboSystem instance.\n * @property {rendering.GlBackBufferSystem} backBuffer - BackBufferSystem instance.\n * @property {rendering.GlContextSystem} context - ContextSystem instance.\n * @property {rendering.GlBufferSystem} buffer - BufferSystem instance.\n * @property {rendering.GlTextureSystem} texture - TextureSystem instance.\n * @property {rendering.GlRenderTargetSystem} renderTarget - RenderTargetSystem instance.\n * @property {rendering.GlGeometrySystem} geometry - GeometrySystem instance.\n * @property {rendering.GlUniformGroupSystem} uniformGroup - UniformGroupSystem instance.\n * @property {rendering.GlShaderSystem} shader - ShaderSystem instance.\n * @property {rendering.GlEncoderSystem} encoder - EncoderSystem instance.\n * @property {rendering.GlStateSystem} state - StateSystem instance.\n * @property {rendering.GlStencilSystem} stencil - StencilSystem instance.\n * @property {rendering.GlColorMaskSystem} colorMask - ColorMaskSystem instance.\n * @extends rendering.AbstractRenderer\n */\n/* eslint-enable max-len */\nexport class WebGLRenderer<T extends ICanvas = HTMLCanvasElement>\n    extends AbstractRenderer<WebGLPipes, WebGLOptions, T>\n    implements WebGLSystems\n{\n    public gl: GlRenderingContext;\n\n    constructor()\n    {\n        const systemConfig = {\n            name: 'webgl',\n            type: RendererType.WEBGL,\n            systems,\n            renderPipes,\n            renderPipeAdaptors,\n        };\n\n        super(systemConfig);\n    }\n}\n","import { UniformGroup } from '../../shared/shader/UniformGroup';\n\nconst batchSamplersUniformGroupHash: Record<number, UniformGroup> = {};\n\n/**\n * Automatically generates a uniform group that holds the texture samplers for a shader.\n * This is used mainly by the shaders that batch textures!\n * @param maxTextures - the number of textures that this uniform group will contain.\n * @returns a uniform group that holds the texture samplers.\n */\nexport function getBatchSamplersUniformGroup(maxTextures: number)\n{\n    let batchSamplersUniformGroup = batchSamplersUniformGroupHash[maxTextures];\n\n    if (batchSamplersUniformGroup) return batchSamplersUniformGroup;\n\n    const sampleValues = new Int32Array(maxTextures);\n\n    for (let i = 0; i < maxTextures; i++)\n    {\n        sampleValues[i] = i;\n    }\n\n    batchSamplersUniformGroup = batchSamplersUniformGroupHash[maxTextures] = new UniformGroup({\n        uTextures: { value: sampleValues, type: `i32`, size: maxTextures }\n    }, { isStatic: true });\n\n    return batchSamplersUniformGroup;\n}\n"],"names":["GlGraphicsAdaptor","init","uniforms","UniformGroup","uColor","value","Float32Array","type","uTransformMatrix","Matrix","uRound","maxTextures","maxRecommendedTextures","glProgram","compileHighShaderGlProgram","name","bits","colorBitGl","generateTextureBatchBitGl","localUniformBitGl","roundPixelsBitGl","shader","Shader","resources","localUniforms","batchSamplers","getBatchSamplersUniformGroup","execute","graphicsPipe","renderable","context","customShader","this","renderer","contextSystem","graphicsContext","geometry","instructions","getContextRenderData","groups","globalUniforms","bindGroup","state","set","bind","batches","i","instructionSize","batch","size","j","textures","length","texture","draw","start","destroy","extension","ExtensionType","WebGLPipesAdaptor","GlMeshAdaptor","textureBitGl","_shader","uTexture","Texture","EMPTY","source","textureUniforms","uTextureMatrix","meshPipe","mesh","warn","uSampler","style","textureMatrix","mapCoord","localUniformsBindGroup","encoder","_geometry","GlBatchAdaptor","constructor","_didUpload","_tempState","State","for2d","batcherPipe","runners","contextChange","add","batchPipe","updateUniformGroup","uniformGroup","blendMode","BUFFER_TYPE","BUFFER_TYPE2","GlBuffer","buffer","updateID","byteLength","GlBufferSystem","_gpuBuffers","Object","create","_boundBufferBases","_renderer","_gl","gl","getGlBuffer","uid","createGLBuffer","glBuffer","bindBuffer","bindBufferBase","index","UNIFORM_BUFFER","bindBufferRange","offset","updateBuffer","_updateID","data","bufferSubData","_updateSize","BYTES_PER_ELEMENT","drawType","descriptor","usage","BufferUsage","STATIC","STATIC_DRAW","DYNAMIC_DRAW","bufferData","destroyAll","id","deleteBuffer","onBufferDestroy","contextLost","ARRAY_BUFFER","INDEX","ELEMENT_ARRAY_BUFFER","UNIFORM","createBuffer","on","WebGLSystem","_GlContextSystem","supports","uint32Indices","uniformBufferObject","vertexArrayObject","srgbTextures","nonPowOf2wrapping","msaa","nonPowOf2mipmaps","extensions","handleContextLost","handleContextRestored","isLost","isContextLost","options","defaultOptions","initFromContext","_options$premultiplie","_options$powerPrefere","alpha","background","premultipliedAlpha","antialias","backBuffer","useBackBuffer","createContext","preferWebGLVersion","stencil","preserveDrawingBuffer","powerPreference","webGLVersion","DOMAdapter","get","getWebGLRenderingContext","getExtensions","validateContext","emit","element","view","canvas","addEventListener","getContext","Error","common","anisotropicFiltering","getExtension","floatTextureLinear","s3tc","s3tc_sRGB","etc","etc1","pvrtc","atc","astc","bptc","rgtc","loseContext","drawBuffers","depthTexture","uint32ElementIndex","floatTexture","textureHalfFloat","textureHalfFloatLinear","vertexAttribDivisorANGLE","srgb","colorBufferFloat","provokeExt","provokingVertexWEBGL","FIRST_VERTEX_CONVENTION_WEBGL","event","preventDefault","_contextLossForced","setTimeout","_this$extensions$lose","restoreContext","_this$extensions$lose2","removeEventListener","useProgram","forceContextLoss","_this$extensions$lose3","attributes","getContextAttributes","isWebGl2","GlContextSystem","GL_FORMATS","GL_FORMATS2","GL_TARGETS","GL_TARGETS2","GL_TYPES","GL_TYPES2","infoMap","uint8x2","UNSIGNED_BYTE","uint8x4","sint8x2","BYTE","sint8x4","unorm8x2","unorm8x4","snorm8x2","snorm8x4","uint16x2","UNSIGNED_SHORT","uint16x4","sint16x2","SHORT","sint16x4","unorm16x2","unorm16x4","snorm16x2","snorm16x4","float16x2","HALF_FLOAT","float16x4","float32","FLOAT","float32x2","float32x3","float32x4","uint32","UNSIGNED_INT","uint32x2","uint32x3","uint32x4","sint32","INT","sint32x2","sint32x3","sint32x4","getGlTypeFromFormat","format","_infoMap$format","topologyToGlMap","GlGeometrySystem","_geometryVaoHash","_activeGeometry","_activeVao","hasVao","hasInstance","nativeVaoExtension","createVertexArray","createVertexArrayOES","bindVertexArray","vao","bindVertexArrayOES","deleteVertexArray","deleteVertexArrayOES","nativeInstancedExtension","drawArraysInstanced","a","b","c","d","drawArraysInstancedANGLE","drawElementsInstanced","e","drawElementsInstancedANGLE","vertexAttribDivisor","program","getVao","updateBuffers","reset","unbind","bufferSystem","buffers","checkCompatibility","geometryAttributes","shaderAttributes","_attributeData","concat","getSignature","attribs","strings","push","location","join","_this$_geometryVaoHas","_key","initGeometryVao","_getProgramData","signature","onGeometryDestroy","vaoObjectHash","ensureAttributes","activateVao","arguments","undefined","indexBuffer","lastBuffer","attribute","programAttrib","_programAttrib$format","enableVertexAttribArray","attributeInfo","getAttributeInfoFromFormat","substring","vertexAttribIPointer","stride","vertexAttribPointer","normalised","instance","topology","instanceCount","glTopology","byteSize","glType","drawElements","getSize","drawArrays","bigTriangleGeometry","Geometry","aPosition","_GlBackBufferSystem","_useBackBufferThisRender","_antialias","_state","bigTriangleProgram","GlProgram","vertex","fragment","_bigTriangleShader","WHITE","renderStart","renderTarget","getRenderTarget","target","isRoot","renderTarget2","_targetTexture","colorTexture","_getBackBufferTexture","renderEnd","_presentBackBuffer","finishRenderPass","_backBufferTexture","targetSourceTexture","TextureSource","width","height","resolution","_resolution","resize","priority","GlBackBufferSystem","GlColorMaskSystem","_colorMaskCache","setMask","colorMask","GlEncoderSystem","commandFinished","Promise","resolve","setGeometry","skipSync","_activeProgram","GlStencilSystem","_stencilCache","enabled","stencilReference","stencilMode","STENCIL_MODES","NONE","_renderTargetStencilState","onRenderTargetChange","_comparisonFuncMapping","always","ALWAYS","never","NEVER","equal","EQUAL","NOTEQUAL","less","LESS","LEQUAL","greater","GREATER","GEQUAL","_stencilOpsMapping","keep","KEEP","zero","ZERO","replace","REPLACE","invert","INVERT","INCR","DECR","INCR_WRAP","DECR_WRAP","_activeRenderTarget","stencilState","DISABLED","setStencilMode","mode","GpuStencilModesToPixi","enable","STENCIL_TEST","stencilFunc","stencilBack","compare","stencilOp","passOp","disable","WGSL_TO_STD40_SIZE","f32","createUboElementsSTD40","uniformData","uboElements","map","chunkSize","uboElement","Math","max","lineUpValue","ceil","generateArraySyncSTD40","offsetToAdd","rowSize","elementSize","remainder","createUboSyncFunctionSTD40","createUboSyncFunction","uboSyncFunctionsSTD40","GlUboSystem","UboSystem","createUboElements","generateUboSync","GlRenderTarget","msaaRenderBuffer","GlRenderTargetAdaptor","_clearColorCache","_viewPortCache","Rectangle","renderTargetSystem","_renderTargetSystem","copyToTexture","sourceRenderSurfaceTexture","destinationTexture","originSrc","originDest","glRenderTarget","getGpuRenderTarget","bindFramebuffer","FRAMEBUFFER","resolveTargetFramebuffer","copyTexSubImage2D","TEXTURE_2D","x","y","startRenderPass","clear","clearColor","viewport","gpuRenderTarget","viewPortY","pixelHeight","colorTextures","forEach","framebuffer","viewPortCache","depthStencilRenderBuffer","depth","_initStencil","READ_FRAMEBUFFER","blitFramebuffer","COLOR_BUFFER_BIT","NEAREST","initGpuRenderTarget","resource","_initColor","destroyGpuRenderTarget","deleteFramebuffer","deleteRenderbuffer","renderBuffer","_renderTarget","CLEAR","ALL","COLOR","_clearColor","defaultClearColor","clearColorCache","clearColorArray","resizeGpuRenderTarget","_resizeColor","_resizeStencil","createFramebuffer","pixelWidth","bindSource","glTexture","getGlSource","framebufferTexture2D","COLOR_ATTACHMENT0","viewFramebuffer","_","createRenderbuffer","source2","glInternalFormat","internalFormat","bindRenderbuffer","RENDERBUFFER","renderbufferStorageMultisample","framebufferRenderbuffer","DEPTH_STENCIL_ATTACHMENT","DEPTH24_STENCIL8","renderbufferStorage","DEPTH_STENCIL","GlRenderTargetSystem","RenderTargetSystem","super","adaptor","GlProgramData","uniformGroups","uniformDirtyGroups","uniformBlockBindings","compileShader","src","createShader","shaderSource","booleanArray","array","Array","defaultValue","Int32Array","Uint32Array","GL_TABLE","GL_TO_GLSL_TYPES","FLOAT_VEC2","FLOAT_VEC3","FLOAT_VEC4","INT_VEC2","INT_VEC3","INT_VEC4","UNSIGNED_INT_VEC2","UNSIGNED_INT_VEC3","UNSIGNED_INT_VEC4","BOOL","BOOL_VEC2","BOOL_VEC3","BOOL_VEC4","FLOAT_MAT2","FLOAT_MAT3","FLOAT_MAT4","SAMPLER_2D","INT_SAMPLER_2D","UNSIGNED_INT_SAMPLER_2D","SAMPLER_CUBE","INT_SAMPLER_CUBE","UNSIGNED_INT_SAMPLER_CUBE","SAMPLER_2D_ARRAY","INT_SAMPLER_2D_ARRAY","UNSIGNED_INT_SAMPLER_2D_ARRAY","GLSL_TO_VERTEX_TYPES","float","vec2","vec3","vec4","int","ivec2","ivec3","ivec4","uint","uvec2","uvec3","uvec4","bool","bvec2","bvec3","bvec4","mapType","typeNames","keys","tn","mapGlToVertexFormat","typeValue","logPrettyShaderError","shaderSrc","getShaderSource","split","line","shaderLog","getShaderInfoLog","splitShader","dedupe","lineNumbers","parseFloat","filter","n","logArgs","number","fragmentSourceToLog","console","error","groupCollapsed","groupEnd","generateProgram","glVertShader","VERTEX_SHADER","glFragShader","FRAGMENT_SHADER","webGLProgram","createProgram","attachShader","transformFeedbackVaryings","names","bufferMode","SEPARATE_ATTRIBS","INTERLEAVED_ATTRIBS","linkProgram","getProgramParameter","LINK_STATUS","vertexShader","fragmentShader","getShaderParameter","COMPILE_STATUS","getProgramInfoLog","logProgramError","sortAttributes","totalAttributes","ACTIVE_ATTRIBUTES","attribData","getActiveAttrib","startsWith","sort","bindAttribLocation","getAttribLocation","extractAttributesFromGlProgram","test","_uniformData","totalUniforms","ACTIVE_UNIFORMS","getActiveUniform","isArray","match","getUniformData","_uniformBlockData","ACTIVE_UNIFORM_BLOCKS","uniformBlocks","totalUniformsBlocks","getActiveUniformBlockName","uniformBlockIndex","getUniformBlockIndex","getActiveUniformBlockParameter","UNIFORM_BLOCK_DATA_SIZE","getUboData","deleteShader","getUniformLocation","defaultSyncData","textureCount","blockIndex","GlShaderSystem","_programDataHash","_nextIndex","_boundUniformsIdsToIndexHash","_boundIndexToUniformsHash","_shaderSyncFunctions","_maxBindings","MAX_UNIFORM_BUFFER_BINDINGS","getParameter","_setProgram","syncFunction","_generateShaderSync","bindUniformBlock","programData","isBufferResource","_bufferResource","ubo","boundIndex","nextIndex","currentBoundUniformGroup","uniformBlockBinding","_createProgramData","key","shaderSystem","funcFragments","headerFragments","addedTextreSystem","group","BufferResource","uniformName","_uniformBindMap","uniform1i","functionSource","Function","generateShaderSyncCode","UNIFORM_TO_SINGLE_SETTERS","i32","u32","UNIFORM_TO_ARRAY_SETTERS","GlUniformGroupSystem","_cache","_uniformGroupSyncHash","syncData","isStatic","_dirtyId","_getUniformSyncFunction","syncFunc","_this$_uniformGroupSy","_signature","_createUniformSyncFunction","uniformGroupSyncHash","_getSignature","_generateUniformsSync","uniform","uniformStructures","parsed","uniformParsers","parser","template","generateUniformsSync","preFix","_GlStateSystem","stateId","polygonOffset","_blendEq","setBlend","setOffset","setCullFace","setDepthTest","setFrontFace","setDepthMask","checks","defaultState","blendModesMap","blendMap","normal","ONE","ONE_MINUS_SRC_ALPHA","multiply","DST_COLOR","screen","ONE_MINUS_SRC_COLOR","none","SRC_ALPHA","erase","mapWebGLBlendModesToPixi","diff","call","forceState","_updateCheck","_checkBlendMode","BLEND","_checkPolygonOffset","POLYGON_OFFSET_FILL","DEPTH_TEST","depthMask","CULL_FACE","frontFace","setBlendMode","blendFunc","blendFuncSeparate","blendEquationSeparate","FUNC_ADD","setPolygonOffset","scale","pixelStorei","UNPACK_FLIP_Y_WEBGL","func","indexOf","splice","system","GlStateSystem","GlTexture","RGBA","samplerType","glUploadBufferImageResource","upload","texSubImage2D","texImage2D","compressedFormatMap","glUploadCompressedTextureResource","UNPACK_ALIGNMENT","mipWidth","mipHeight","compressed","levelBuffer","compressedTexImage2D","glUploadImageResource","alphaMode","UNPACK_PREMULTIPLY_ALPHA_WEBGL","glWidth","glHeight","textureWidth","textureHeight","resourceWidth","resourceHeight","glUploadVideoResource","isValid","scaleModeToGlFilter","linear","nearest","mipmapScaleModeToGlFilter","wrapModeToGlAddress","repeat","compareModeToGlCompare","applyStyleParams","mipmaps","anisotropicExt","glFunctionName","firstParam","forceClamp","firstCreation","castParam","addressModeU","addressModeV","addressModeW","wrapModeS","wrapModeT","wrapModeR","TEXTURE_WRAP_S","TEXTURE_WRAP_T","TEXTURE_WRAP_R","magFilter","TEXTURE_MAG_FILTER","mipmapFilter","glFilterMode","minFilter","TEXTURE_MIN_FILTER","maxAnisotropy","level","min","MAX_TEXTURE_MAX_ANISOTROPY_EXT","TEXTURE_MAX_ANISOTROPY_EXT","TEXTURE_COMPARE_FUNC","GlTextureSystem","managedTextures","_glTextures","_glSamplers","_boundTextures","_activeTextureLocation","_boundSamplers","_uploads","image","video","_useSeparateSamplers","_mapFormatToInternalFormat","bgra8unorm","SRGB8_ALPHA8_EXT","SRGB8_ALPHA8","RGBA8","r8unorm","R8","r8snorm","R8_SNORM","r8uint","R8UI","r8sint","R8I","r16uint","R16UI","r16sint","R16I","r16float","R16F","rg8unorm","RG8","rg8snorm","RG8_SNORM","rg8uint","RG8UI","rg8sint","RG8I","r32uint","R32UI","r32sint","R32I","r32float","R32F","rg16uint","RG16UI","rg16sint","RG16I","rg16float","RG16F","rgba8unorm","rgba8snorm","RGBA8_SNORM","rgba8uint","RGBA8UI","rgba8sint","RGBA8I","rgb9e5ufloat","RGB9_E5","rgb10a2unorm","RGB10_A2","rg11b10ufloat","R11F_G11F_B10F","rg32uint","RG32UI","rg32sint","RG32I","rg32float","RG32F","rgba16uint","RGBA16UI","rgba16sint","RGBA16I","rgba16float","RGBA16F","rgba32uint","RGBA32UI","rgba32sint","RGBA32I","rgba32float","RGBA32F","stencil8","STENCIL_INDEX8","depth16unorm","DEPTH_COMPONENT16","depth24plus","DEPTH_COMPONENT24","depth32float","DEPTH_COMPONENT32F","DEPTH32F_STENCIL8","COMPRESSED_RGBA_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT3_EXT","COMPRESSED_RGBA_S3TC_DXT5_EXT","COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT","COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT","COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT","COMPRESSED_RED_RGTC1_EXT","COMPRESSED_SIGNED_RED_RGTC1_EXT","COMPRESSED_RED_GREEN_RGTC2_EXT","COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT","COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT","COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT","COMPRESSED_RGBA_BPTC_UNORM_EXT","COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT","COMPRESSED_RGB8_ETC2","COMPRESSED_SRGB8_ETC2","COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2","COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2","COMPRESSED_RGBA8_ETC2_EAC","COMPRESSED_SRGB8_ALPHA8_ETC2_EAC","COMPRESSED_R11_EAC","COMPRESSED_SIGNED_RG11_EAC","COMPRESSED_RGBA_ASTC_4x4_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR","COMPRESSED_RGBA_ASTC_5x4_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR","COMPRESSED_RGBA_ASTC_5x5_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR","COMPRESSED_RGBA_ASTC_6x5_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR","COMPRESSED_RGBA_ASTC_6x6_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR","COMPRESSED_RGBA_ASTC_8x5_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR","COMPRESSED_RGBA_ASTC_8x6_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR","COMPRESSED_RGBA_ASTC_8x8_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR","COMPRESSED_RGBA_ASTC_10x5_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR","COMPRESSED_RGBA_ASTC_10x6_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR","COMPRESSED_RGBA_ASTC_10x8_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR","COMPRESSED_RGBA_ASTC_10x10_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR","COMPRESSED_RGBA_ASTC_12x10_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR","COMPRESSED_RGBA_ASTC_12x12_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR","mapFormatToGlInternalFormat","_mapFormatToType","UNSIGNED_INT_5_9_9_9_REV","UNSIGNED_INT_2_10_10_10_REV","UNSIGNED_INT_10F_11F_11F_REV","UNSIGNED_INT_24_8","FLOAT_32_UNSIGNED_INT_24_8_REV","mapFormatToGlType","_mapFormatToFormat","RED","RG","RGB","DEPTH_COMPONENT","mapFormatToGlFormat","initSource","_bindSampler","_touched","textureGC","count","_activateLocation","bindTexture","bindSampler","sampler","_getGlSampler","boundTextures","activeTexture","TEXTURE0","_initSource","createTexture","autoGenerateMipmaps","isPowerOfTwo","biggestDimension","mipLevelCount","floor","log2","includes","onSourceUpdate","onStyleChange","onSourceDestroy","onSourceUnload","onUpdateMipmaps","updateStyle","deleteTexture","uploadMethodId","generateMipmap","off","_initSampler","glSampler","createSampler","_resourceId","generateCanvas","pixels","getPixels","createCanvas","ctx","imageData","createImageData","putImageData","frame","round","Uint8Array","glRenterTarget","readPixels","Uint8ClampedArray","slice","DefaultWebGLSystems","SharedSystems","DefaultWebGLPipes","SharedRenderPipes","DefaultWebGLAdapters","systems","renderPipes","renderPipeAdaptors","handleByNamedList","WebGLPipes","WebGLRenderer","AbstractRenderer","RendererType","WEBGL","batchSamplersUniformGroupHash","batchSamplersUniformGroup","sampleValues","uTextures"],"sourceRoot":""}